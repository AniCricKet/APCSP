{
  
    
        "post0": {
            "title": "JavaScript Tutorial",
            "content": "| Overview | Tutorial | Calculator | Binary | Grades | Graph | Life | Snake | . . console.log output . Output to console using the classic programming introduction using a &quot;Hello, World!&quot; message. . The command or function is console.log() | &quot;Hello, World&quot; is a String literal. This is the referred to as Static text, as it does not change. | &quot;Hello, World&quot; is a parameter to the console.log command. | The console.log command outputs the parameter to the console, so you can see it in this Jupyter document. | Note, in a Web Application, console.log is used for debugging and is not visible from the browser via HTML. It is used behind the scenes, when using Inspect-&gt;Console from the browser. | . console.log(&quot;Hello, World!&quot;); . console.log output showing use of variable . This second example is a sequence of code, two or more lines forms a sequence. This example defines a variable, then outputs the msg to terminal. . The variable &quot;var msg =&quot; is used to capture the data | The console.log(msg) outputs to console | . var msg = &quot;Hello, World!&quot;; console.log(msg); . console.log output showing use of a function . This example passes the previously defined variable &quot;msg&quot; to the newly defined &quot;function logIt(output)&quot;. . There are two steps in the code, the definition of the function and the call to the function. &quot;function logIt(output) {}&quot; and everything between curly braces is the definitions of the function. | &quot;logIt(msg)&quot; is the call to the function, this actually activates the function. If you remove this line you will not receive any output to console. | . | Since the variable &quot;msg&quot; was defined in previous cell, it is used a parameter when calling the logMessage function. | . function logIt(output) { console.log(output); } logIt(msg); . Showing reuse of a function . Now that a function is defined, it can be called from any of the subsequent cell in the Jupyter notebook. A function/method, is a process of creating a procedural abstraction. This a programming practice to promote reuse versus coding the same thing over and over. . First call sends a different string message | Second call sends a number | . console.log(&quot;Reuse of logIT&quot;) logIt(&quot;Hello, Students!&quot;); logIt(2022) . Dynamic or Loosely typed language (string, number) . JavaScript is a loosely typed language, meaning you don&#39;t have to specify what type of information will be stored in a variable in advance. The variable type is determined at runtime. This is similar to Python and most interpretive languages. Java which is a compiled language is strongly typed, thus you will see string, integer, double, and object in the source code. In JavaScript, the &quot;typeof&quot; keyword returns the type. . function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } console.log(&quot;Looking at dynamic nature of types in JavaScript&quot;) logItType(&quot;hello&quot;); // String logItType(2020); // Number logItType([1, 2, 3]); // Object is generic for this Array, which similar to Python List . Build a Person Function/Class object and JSON . JavaScript functions have special properties and syntax is shown in many ways. In fact, a Class in JavaScript is a special function. Jupyter Notebooks seems to be more friendly to &quot;function&quot; definitions versus &quot;Class&quot;, thus this lesson uses &quot;function&quot; and &quot;prototype&quot; versus &quot;Class&quot;. . Definition of function allows for a collection of data, the &quot;function Person&quot; allows programmer to retain name, github id, and class of designation. | Definition of a prototype allow for the definition of a method associated with the function , the &quot;Person.prototype.toJSON&quot; allows the collection of data to be expressed in a json/string versus JavaScript object. | Instance of a function, the &quot;var teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977)&quot; line makes a variable &quot;teacher&quot; which is an object representation of &quot;function Person&quot;. | . // define a function to hold data for a Person function Person(name, ghID, classOf) { this.name = name; this.ghID = ghID; this.classOf = classOf; this.role = &quot;&quot;; } // define a setter for role in Person data Person.prototype.setRole = function(role) { this.role = role; } // define a JSON conversion &quot;method&quot; associated with Person Person.prototype.toJSON = function() { const obj = {name: this.name, ghID: this.ghID, classOf: this.classOf, role: this.role}; const json = JSON.stringify(obj); return json; } // make a new Person and assign to variable teacher var teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977); teacher.setRole(&quot;Teacher&quot;); // output of Object and JSON/string associated with Teacher logItType(teacher); // object type is easy to work with in JavaScript logItType(teacher.toJSON()); // json/string is useful when passing data on internet . Build a Classroom Array/List of Persons and JSON . Many key elements are shown again. New elements include... . Building an Array, &quot;var students&quot; is an array of many persons | Building a Classroom, this show forEach iteration through an array and .push adding to an array. These are key concepts in all programming languages. | . // define a student Array of Person(s) var students = [ new Person(&quot;Anthony&quot;, &quot;tonyhieu&quot;, 2022), new Person(&quot;Bria&quot;, &quot;B-G101&quot;, 2023), new Person(&quot;Allie&quot;, &quot;xiaoa0&quot;, 2023), new Person(&quot;Tigran&quot;, &quot;Tigran7&quot;, 2023), new Person(&quot;Rebecca&quot;, &quot;Rebecca-123&quot;, 2023), new Person(&quot;Vidhi&quot;, &quot;unknown&quot;, 2024) ]; // define a classroom and build Classroom objects and json function Classroom(teacher, students){ // 1 teacher, many student // start Classroom with Teacher teacher.setRole(&quot;Teacher&quot;); this.teacher = teacher; this.classroom = [teacher]; // add each Student to Classroom this.students = students; this.students.forEach(student =&gt; { student.setRole(&quot;Student&quot;); this.classroom.push(student); }); // build json/string format of Classroom this.json = []; this.classroom.forEach(person =&gt; this.json.push(person.toJSON())); } // make a CompSci classroom from formerly defined teacher and students compsci = new Classroom(teacher, students); // output of Objects and JSON in CompSci classroom logItType(compsci.classroom); // constructed classroom object logItType(compsci.classroom[0].name); // abstract 1st objects name logItType(compsci.json[0]); // show json conversion of 1st object to string logItType(JSON.parse(compsci.json[0])); // show JSON.parse inverse of JSON.stringify . IJavaScript and Table formatting using toHTML method . This example builds a Classroom method _toHTML which is passed to the IJavaScript interpreter $$.html which renders output similarly to a real website. . JavaScript in the _toHTML method is broken into three parts... Style part is building CSS inline formatting | Body part is constructing the Table Rows (tr), Table Headings (th), and Table Data (td). The table data is obtained from a Classroom object. The JavaScript for loop allows the construction of a new row of data for each person object in the Array. | Return part creates the HTML fragment for rendering | . | The last line in the example $$.html is IJavaScript HTML interpreter and by passing the parameter of the _toHTML method it obtains HTML to render | . // define an HTML conversion &quot;method&quot; associated with Classroom Classroom.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;background:black;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;GitHub ID&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Class Of&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of compsci.classroom for (var row of compsci.classroom) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.ghID + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.classOf + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(compsci._toHtml()); .",
            "url": "https://nighthawkcoders.github.io/APCSP/techtalk/javascript",
            "relUrl": "/techtalk/javascript",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Program Design with App Lab by Code.org",
            "content": "AppLab . App Lab is a programming environment where you can make simple apps. Design an app, code in JavaScript with either blocks or text, then share your app with Teacher or Student Peers. The big limitations of App Lab, that makes it simple, is that the HTML and CSS are not available to developer/student coder, thus it is not directly transportable to an independent Web server. . To start, please create a code.org account and click the link . Development and Design Activity . Here are some key requirements for this Activity… . Design and Development activity will start by reviewing a running example application | After review students will design a quiz, 3 question at a minimum. Be sure that a Development design is ready before you start coding | After design students will explore the App Lab programming environment | Students will then work in Pair Programming format and alternate in roles of Driver and Navigator. | At conclusion, pairs will go through a series of reviews. | . Review Running Example . This is an example of an incomplete program. . What could you do to improve this program? | . Design . Come up with your own idea for 3 question quiz. You will be creating your own quiz with a partner on a topic of your choice. The most important thing you do before coding is to PLAN. Make an outline of the quiz you would like to create before you do any coding, do this in your Blog!!! . Exploring App Lab . Go ahead and take a look at the interface, discuss with a partner what features you see. | . Console . In the code toolbox click variables and look at: console.log(“message”) Drag this into your workspace. You can change the message if you would like . The message does not print in the app. Where does it print? | Why would it be useful to have a print statement that the user does not see? | . Elements . Make sure you are in design mode and select the elements to drag into the app. Take a look at the changeable attributes of each elements. You can use the workspace to change these manually or you can try to change the attributes with a line of code. . In the code toolbox click UI controls. There are multiple functions that can affect the elements. Go ahead and play around with the different elements and see what you can do. Share something interesting you found with your partner. | How can you keep track of all the elements you created? | . | When you are done: Share your program with the class here | Class programs can be found here | . | . Hacks . The Hack on this assignment is described in the information above . If you finish your quiz early, try coming up with a different concept or idea for an app you think could work within App Lab. Remember to make a plan before you start any coding. | .",
            "url": "https://nighthawkcoders.github.io/APCSP/techtalk/applab",
            "relUrl": "/techtalk/applab",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Creative Development Sprint",
            "content": "Creative Development - Week 3 . In the Student handout… College Board states that Students need to obtain knowledge and skills that can include, but need not be limited to, “the iterative development process, strategies for collaboration, the development of both data and procedural abstractions, and describing an algorithm’s purpose and explaining how it functions. A development process includes ideation, research, reflection, design, implementation, and testing your program. . Scrum Board planning, revising plans, incremental goals, and iterative development are proven methods toward achieving a successful delivery. | Pair Share team needs to work together to optimize delivery to Teacher. | Each student needs to become competent in HTML fragments, Jupyter Notebooks, and Python. | Each student needs to begin technical application of College Board requirements in “Unt 2: Data” and “Unit 3: Algorithms and Programming”. | . Weekly Schedule . Tuesday (makeup Monday): PBL review below; “Live Review” with pairs: show personal progress in ideation and prototyping. | Wednesday: Test Prep - Discuss Create Performance Task. | Thursday: Tech Talk - Code.org AppLab | Friday: Crossover Review last 15-20 minutes with crossover grading | . PBL Ideation . Start the process of Ideation, Design, Scrum Board building, and assigning Issues prior to coding. Ideation are early ideas. . One unique idea, aka something useful to your pair and/or something that helps you in school | Show case work and labs from TPT and TT. | A page that highlights YOU | In this ideation process, it is critical that you Review College Board Create Task project requirements. | . PBL Prototyping . The process of Ideation, Design, Scrum Board building, and assigning Issues prior to coding. Early ideas, followed by early coding (prototyping) helps lead Developers into the iterative processes of Development. . This should be done using Pair Programming. A driver and observer, then switching. | . PBL Code/Code/Coding . This is bringing Ideation and Prototyping into something that has function and purpose. . Issues and Coding should show progress to Create Performance Task requirements. | This is a Creative Development Sprint, it is not expected to be finished. However, it should show iterative progress. | . PBL Test . Projects should be tested. Test-driven development (TDD) is a software development process relying on software requirements (Issues) being converted to test cases before software is fully developed. . Test cases should be developed within Issue before software is fully developed. | Testing and reviews can be combined with crossover grading. | Self and crossover testing and grading should consider how your ‘Unique idea(s)’ matches your Issue(s). | Undoubtedly, after this phase, new Issues are created; these issues represent changes that were not obvious when you started. | . PBL Development . At this point in time… It should be obvious that Development and Coding are not the same thing. Answer the question, “what is development?” or “why do they call people that code engineers?”. . . Progressive learning objectives to become a Development Engineer versus a Coder. Students need to establish a Trimester Long self-evaluation progress sheet on these objectives throughout the term.. Each time you do a review ticket you should consider with of these you have improved on. Proficiency in GitHub Pages/Fastpages and Jupyter Notebooks. Learn how to keep notes, search, tag, and develop code fragments in a personal GH Pages project | Become Active in Classroom Development Methodologies like Pair Programming, Issue Definition, Scrum Boards, GitHub Code Management, Review Tickets, Video making, Lesson Presentation, and Live Grading | Establish skills in Fundamentals of Programming using Python and JavaScript. Understanding Code concepts like Sequences, Selection, Iteration, and Procedural Abstraction | Become fluent in Data Abstraction using Arrays in JavaScript, JavaScript Object Notation (JSON), and Python Lists and Dictionaries | Establish Developer Operations (DevOps) skills in GitHub, Visual Studio Code, Linux, Bash, AWS and other Deployment tooling | Learn how to build the Frontend (JavaScript fetch) and Backend (Python/Flask) Web components of a Web Server. Become knowledgeable in Web Server endpoints and working with JSON. | Develop understanding on how Binary works and how it is the language behind all languages and data. Examine this more in depth through the exploration of binary abstraction used in Images | Relate all of the above objectives to the College Board Big Ideas 1-5 and the Create Performance Task requirement. Start self-evaluation process on GH pages. Additionally, Teachers will administer CB competency via MCQ testing available on AP Classroom | . . . Hacks - Live Grade before Monday AM. . This is a big planning and prototype week, Build all things into Scrum Board. Individuals demonstrate progress on assigned Issue(s) and then complete Issue(s)with tangibles. . DO NOT show up to a review without a Issue(s), mostly referred to as a Review Ticket with links to Tangibles. NEVER state that you don’t have an Issue or Commit because you were helping someone else. This statement will get you a 70% grade at best. | Provide Crossover and Self grade at the top of the Review Ticket. Anyone who rates their work above 90% must have something completed outside of the requirements. | GitHub Page and Jupyter notebooks makes it easy to have a link to your own tangible(s) in a working document. | A high quality Issue will reflect Ideation, Prototyping, Code. It is very easy to take 5 minutes a day to update your Issue before embarking into work. This is called Daily Planning. In fact, Daily Planning will help with your classroom focus | A good way to progress above 90% is to show how you are becoming a Development Engineer. | . | Each Pair performs Review each week with crossover Pair, use review to see if Issue is complete Crossover must make comments and grade within their comment, if individual has not done a crossover grade with comments they will receive 10% reduction on their score. | Individual grade and Crossover grade at top of Review Ticket is required. Make sure you do math on any rubrics provided, grade yourself on everything in the Canvas assignment, it does not matter what the vocabulary is around points and ownership. | If you score yourself higher than the grade you received from Crossover, show how you made adjustment/corrections. | Individual will need to discuss grading and reflection/learnings from crossover grading during their presentation. | . | Each Pair programming partnership should be prepared to complete their review with Teacher in about 2 minutes. Focus is on Creative Development. Be prepared to talk and accept feedback. | Focus on Review Ticket, Demo, Issues(s) completed, Failures, and New Issues Created | Optimize time for where you are the same. | Individuals should each speak to their own differences | Think about your vocabulary!!! For instance, when you say development… know how it is different than coding. | . | .",
            "url": "https://nighthawkcoders.github.io/APCSP/week/3",
            "relUrl": "/week/3",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "How I got a 5!",
            "content": "EXAM PREPARATION . TAKE THE NOTES! I know the Collegeboard videos are not the most interesting thing and a lot of them cover topics you may already know from class, but just taking simple notes may come in handy when you need to review towards the end of the tri. Also taking notes is very helpful for remembering overall concepts which means LESS REVIEW NEEDED LATER! | TRY ON THE QUIZZES AND PRACTICE TESTS! They are great practice, and searching up the answers is definitely not the way to go. | QUIZ AND TEST CORRECTIONS! They are a great way from you to learn the information if you didn’t learn it from the video. | BUT MOST HELPFUL (FOR ME)…Khan Academy Videos! I found that these videos were super helpful when I needed to review something really fast, but didn’t want to go to collegeboard. I really thought the videos/assignments on the internet were very effective for me. I think its a great resource to use just to review the topics that you are super confused or just want more clarification about. . They’re videos are super quick and straight to the point, which was good for relearning topics I already knew but needed a refresh on. For example, bits and binary was something that I couldn’t remember from the beginning of the year, and the videos helped me remember the basics. | They have assignments/articles for each topic that basically restate the information in the videos but more visually. The unit that covered data security and encryption is a good example of combining the videos and articles, and they definitely helped me understand public and private keys more. | Their practices are also pretty quick and straightforward if you are looking for extra resources other than the quizzes and practice tests. I used the practice tests about the internet because that was something I was not understanding just from Collegeboard practice. | . | THE EXAM . PAY ATTENTION TO THE QUESTIONS ON THE PRACTICE TESTS! The questions are very similar to what is on the exam. If you know them from the practice exam then you can save up on time from checking your work after you finish. | STARTING TIMING YOUR PRACTICE TESTS! The ones we were given in class were 50 questions. Once you get the hang of the first couple of practice tests, start giving yourself around a hour or an hour and a half to finish all 50 questions. This is gonna help you with pacing and with working under the pressure. | TAKE YOUR TIME! The test is 2 hours for 70 MC. You have time to double and even triple check your answers if you work at a good pace. With that being said don’t stress about not having enough time because you definitely do. | CREATE TASK TIPS . READ OVER THE INSTRUCTIONS CAREFULLY! Make sure that you are including each specific element in your project. It might be helpful to make a checklist with everything and check each item off as you are completing it with your project. I found myself having to review the guidelines a lot because there would be little things that I was forgetting, but doing so definitely made my project stronger. | REVIEW THE PAST EXAMPLES FROM COLLEGEBOARD! Seeing what ideas got lower scores guided me and I knew what to avoid including in my own project. Additionally, the good examples gave me some ideas of how other people included the required lists, iteration, and other items in a creative way. Though these examples might inspire you, make sure that you are coming up with your own idea and not directly copying. I looked at example A and B because those examples got all the points rewarded, so I looked at those for what to include and how much to write for my response. | I looked specifically at examples I and H because they both lost a bunch of points, so I made sure not look at what they did wrong and fix those error in my response. | . | CITE YOUR SOURCES! If you use code from somewhere else, dont forget to make notes throughout giving credit to the original creator. Even something as small as a loop needs to be cited if its from somewhere else. But definitely try to code everything yourself because it’s good practice and you learn a lot through actually working through the bugs in your project. | DON’T MAKE A BASIC GAME! This one is more subjective, but a lot of people were telling me that if you make something basic/generic like hangman or tic tac toe you are not going to get a good score. I think just try to be as creative as possible and make sure that your project has a geniune purpose because that’s an important part of the create task. Also please don’t do a GPA Calculator, its so overdone :) | REVIEW THE SCORING GUIDELINES! Don’t just assume you are meeting each requirement, check the guidelines. They let you know exactly what they are looking for, so its another great way to double check your work. | CODE IT ALL AT ONCE THEN REVIEW EACH SECTION! This is also more subjective, but I found it super helpful to code a basic idea of what my create task would look like and all the functionality in one sitting. Then as the deadline approached, I spent a day working through each sections, adding new functionality that reflected the requirements, and refining the code I already created to be more effcient. This was more helpful for me because I had way more time to refine the code and make it way better than that initial draft. | ADD COMMENTS TO THE CODE AS YOU GO! This is something that I wish I did because I ended up forgetting until the last days before the submission. It was not fun having to organize my code and add comments to each line right before the deadline. Adding comments to each section after you write the code is definitely ideal because you can remember exactly what the purpose is. | SPEND A DAY REARRANGING THE CODE! This was important for me because the order that my code was in only made sense to me. But obviously I’m not the one grading, so I spent time going through and arranging my code in a way that I thought would make sense to a random person going through it line by line. | MY CREATE TASK PROCESS LINKS . INITIAL ROUGH DRAFT . FINAL DRAFT . LINK TO VIDEO RUNTIME . Hacks . Students should create a Sprint Backlog. Here are some focus… | Educational zone(s), how to prepare for AP Classroom (MCQ) | Interest/Fun zone, unique idea(s) for create task | Blogging and Review zone(s), showing what you did and how | .",
            "url": "https://nighthawkcoders.github.io/APCSP/collegeboard/bria",
            "relUrl": "/collegeboard/bria",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "College Board Create Performance Task",
            "content": "Learning Create Performance Task, 30% of grade on AP exam . Each time we engage in Code/Code/Coding it is an opportunity to think of the possibility of fulfilling the Create Performance Task requirement. But, this is a student project and responsibility is on you. To be thinking and preparing is a mindset, one that Del Norte CompSci Teachers advise as we proceed through topics. Thus, we are getting and early start by using this Pair Share project as an iteration through the entire process, as that is the foundational principle behind PBL. . Teacher will help as directed by College Board… . Provide instruction, practice, and feedback related to content and skills that will help students succeed on the performance task. This can include, but needs not be limited to, the iterative development process, strategies for collaboration, the development of both data and procedural abstractions, and describing an algorithm’s purpose and explaining how it functions. | Brainstorm problems that programming can address or brainstorm special interests that students want to incorporate when developing a program. | Assist students in defining their focus and choice of topics without making selections for them (e.g., by asking questions). | Review the performance task directions and provide multiple opportunities to practice and discuss the entire performance task and individual prompts of the task. | Explain the role the teacher can and cannot play in providing students with assistance during the actual performance task; teachers should encourage students to take advantage of the opportunity to get assistance and feedback from teachers and peers during practice. | Review the scoring guidelines with students to help them understand how their work will be assessed. Teachers should remind students that the scoring guidelines align to the prompts in the performance task, so they must respond to all the prompts in their attempt to obtain the highest score possible. | . Disclaimer. Del Norte Computer Science Teachers are not experts in College Board scoring guidelines. It is best to look for examples of performance task submissions at high, medium, and low levels on College Board Web Site. Any grades you receive on any project in class may differ from scoring of the performance task by College Board. . General Requirements, from CB Exam Description . Prior to the official administration of the Create performance task, students need practice implementing programs that first include sequencing, then incorporate selection and iteration, and finally use procedures and lists. While collaboration on ideation and program design and development during the Create performance task is not required, it is encouraged. . You will be provided with a minimum of 12 hours of class time to complete and submit the following: . Final program code (created independently or collaboratively) | A video that displays the running of your program and demonstrates functionality you developed (created independently) | Written responses to all the prompts in the performance task (created independently) | . Del Norte Computer Science Principles Teachers are requiring students to do collaborative ideation, program design, prototyping and pair programming on these early activities that we grade in class. . Create Performance Task Skills and Rubric Breakdown (Out of 6 Points) . Note: There is no partial credit (0 or 1 point for each section). AP Computer Science Principles Exam is a through-course performance task that assesses Computational Thinking Practices 1, 2, 3, and 4 across six rubric rows. . Row 1: Program Purpose and Function . Assesses students’ ability to explain how a code segment or program functions. (Skill: Code Analysis) | For 3a, make sure to differentiate between program purpose and function They are defined in the scoring guidelines | . | . Row 2: Data Abstraction . Assesses students’ ability to use abstraction to manage complexity in a program. (Skill Abstraction in Program Development - data) | . Row 3: Managing Complexity . Assesses students’ ability to explain how abstraction manages complexity. (Skill Abstraction in Program Development explain complexity) | Be specific about how the program manages complexity in the context of your own program | . Row 4: Procedural Abstraction . Assesses students’ ability to use abstraction to manage complexity in a program. (Skill Abstraction in Program Development - procedures/functions) | Must be a student-developed procedure | . Row 5: Algorithm Implementation . Assesses students’ ability to implement and apply an algorithm. (Skill Algorithms and Program Development) | . Row 6: Testing . Assesses students’ ability to investigate the situation, context,or task. (Skill Computational Solution Design - testing) | . Collaboration Rules, from CB Q&amp;A . Collaboration happens when two or more students are actively engaged in the development of a program. Some examples of acceptable ways to collaborate are as follows. . 2 students who are writing the entire program together, perhaps using pair programming. | 2 or more students who have divided a larger, more complex program into different separate parts, each writing their own part and then assembling the pieces into the finished program. | Student(s) giving feedback on an independently or collaboratively written program. | Student(s) providing debugging assistance to another student or collaborative group of students. | . Del Norte Computer Science Principles Teachers want to see all of these prescribe methods of collaboration utilized. . Collaboration without Plagiarism, from CB Q&amp;A . If students are combining independently written program code with another student, they should cite that the program code is written by a collaborative peer. To protect the anonymity of the collaborative peer, students simply state that the portion of program code was written by their collaborative peer, rather than putting the names of themselves or their collaborative peer in the program code. . When completing the Create performance task, students will need to add substantial revisions and additional functionality when starting with preexisting program code. Simply changing an image in a game or the names of variables is insufficient. . Del Norte Computer Science Principles Teachers have zero tolerance for plagiarism. Misrepresenting your own work and not attending class (without makeup) are the only ways to get less than 70% in the class. Plagiarism is 0%, being in class is 50%, any individual effort with attendance gets 70%. The biggest jeopardy to getting a bad grade in the class is getting a 0%, the only possibility of such is plagiarism or missing class without makeup. . Additional Resources . 2021 Scoring Guidelines and Scored Create Task Examples Please note, these scoring guidelines were for 2021. Please check the CollegeBoard website in case there is an updated version. | . | AP Computer Science Principles Course and Exam Description Create Performance Task Verbs Explanation (pg 175 of Course/Exam Description) | . | The CollegeBoard AP Computer Science Principles Course includes videos scoring Create Task Examples Scoring examples | . | CollegeBoard’s Tips on the Create Task Information on written responses starts here | . | . Hacks . Start an outline on how you will prepare for the Create Performance Task project. . Review How I got a 5, by Bria | Establish a personal or pair Scrum Board with active and future Issues | Start a design that _post that can be reviewed to see if it meets the basicCreate Performance Task requirements. Be sure to pick something that you don’t burn out on or is not overly common. | .",
            "url": "https://nighthawkcoders.github.io/APCSP/collegeboard/create",
            "relUrl": "/collegeboard/create",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Creative Development Points",
            "content": "Points will be awarded on these key elements . AppLab Planning/Blogging  . It is important that you make a plan and make note of the steps you take during this process. Work with your partner(s) on process, but you will create your own Blog. . Create a blogpost with an outline of your AppLab project before starting to code.  | Add to or create a blogpost with your thinking and ideas for creating your app, this should be done individually. | This blogpost should help remind you of successes and failures made during your designing process, so be reflective of your work. It is better, if you show the adjustments you needed to make in the process. | . AppLab Creation . This point is earned for the app itself. Add links or screen captures of your created app in AppLab to your blog. . The example app is a quiz, so the expectation is you are able to create your own quiz. You and your partner should work together, but can have individual customizations. | For those looking for a challenge, you can create a more involved app with your partner, testing potential ideas for your create task. | . Create Performance Task Planning/Draft . After going through AppLab process … Now go through the process, with your partner, thinking about what type of App or Web Page you will create for the end of the Trimester Night at the Museum Project that meets College Board criteria. Try applying your AppLab project design and ideas to the Create Performance Task project. . Suggestion is to create a Jupyter notebook for design to be able to add code or markdown in design discussion. | What are all the technical requirements for the project? What can you design now? | What do you need to learn to complete the Create Performance Task design process? What resources do you have available to start on the design journey? | . Live Grading Presentation.  . Each individual needs to perform their own AppLab work and updates.  However, we would like you to work on the design and solving problems as a pair.   On preliminary design and planning for Create Performance Task, work can be shared… . AppLab project runs with no errors and provides score at the end. Show all features in your app. | AppLab project has Blog in each individuals Fastpages that points to individual Code.org work. | Create Performance Task Planning/Draft showing initial ideas, things you know how to do, things you need to learn. Plan to continue to use this blog to fill in the gaps. | Every time requirements Create Review Ticket.  Crossover grades, Crossover Comments, and Blog(s) used during week. | Be prepared to go fast, but show everything we should be under 5 minutes.  3.5 minutes is preferred time for 4 people. | Jupyter Notebooks contain Markdown cells with comments to support code. | . | .",
            "url": "https://nighthawkcoders.github.io/APCSP/points/3",
            "relUrl": "/points/3",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "HTML Fragments",
            "content": "HTML Fragments and Markdown . Building an entire Web Application frontend requires HTML, CSS and JavaScript. In our Fastpages/GitHub Pages a lot of the frontend design work has been done by using Fastpages and Minima theme. Jekyll takes our choice of layouts in our _config.yml file (theme: minima), along with our HTML and Markdown fragments and build a complete static website. . Review these Fragments . Table Fragments . In Fastpages you can build a table in HTML or Markdown. Building in markdown allows you to take advantage of Jekyll. . The index.html does markdown conversion and builds a table with blogs | The _posts/**pseudo_code.md file builds a table with Markdown | . Images . In Fastpages you can insert images in HTML or Markdown. The Teacher finds &lt;img&gt; easier to work with for embedding links when trying to control size. . See index.html for “img” usage | Lookup ![]() syntax for images in markdown guides | . Links . Look up &lt;href&gt; and []() syntax in both HTML and Markdown. These should become easy and familiar. . Tagging . Make sure to use tagging and make it provide a nice index into your information under “Tags” menu. If you have a page Week1, Week2, Week3, in a post, perhaps . toc: true layout: post description: HTML fragments are portions of code used in a greater coding system that enable functionality specific to the current page. Fragments in HTML are a way to abstract complexity. The greater coding system we use is GitHub Pages which uses Jekyll and Liquid to build and programmatically construct fragments into the larger web site. categories: [weeks] title: Week 2 - HTML Fragments . Web Page Layout . A complete HTML Web Application is typically made off of a Layout and a series of Fragments (sometimes called templates). . Web Page Layout. This illustration becomes important when you make your own layout and fragments using frameworks like Jinja2 (for Python) or Thymeleaf (for Java). | The design of GitHub pages allows us to change themes with the _config.yml file (theme: minima) key/value, change the value to a supported theme. But, on my tries it does not work because fastpages has added many features specific to minima. However, you can temporarily change to different look by changing the remote theme to the following location in your _config.yml | Minima theme, click on link for accurate syntax. Everywhere you see an “include” this layout is including a fragment to complement the page, things like CSS, JavaScript, headers and footers are included into the layout. Where you see “content”, this is the statement that includes page specific fragments we have designed added within the layout. You should associate all of this to “Procedural Abstraction”. | . &lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &quot;include head.html&quot; &lt;body&gt; &quot;include header.html&quot; &lt;main class=&quot;page-content&quot; aria-label=&quot;Content&quot;&gt; &lt;div class=&quot;wrapper&quot;&gt; &quot;content&quot; &lt;/div&gt; &lt;/main&gt; &quot;include footer.html&quot; &lt;/body&gt; &lt;/html&gt; . Dark Mode . I have seen several student customize CSS on their front page. This enables them to add color. In our fastpages project, there is a special way to customize. Look for the direct _sass, it has a minima folder. Inside this directory you will see many sccs files, this is the Sassy of customize your project. . Article and findings by Vunsh in CSA to customize to Darkmode | People have customized the dark-mode.scss file to alternate color schemes for different colors, for instance instead of black, I saw Saathvicka change to dark green | . Alert to Students . Students spending majority or large portions of time writing custom CSS will be counter productive to College Board goals and CTE goals for this class. Be aware that HTML style is important, but we are trying to focus more on utilizing framework (GitHub Pages) to maximize our success in the style area. Developers, particularly new Developers, need to ensure they are spending majority of time in the key technical of instruction. Pair Programming and Team Programming are aids in speeding up learning, these collaborative techniques are not intended to be used to defer key technical learnings to others!!! In our first week, I saw code that was not understood by the person asking questions. In 2021-2022 several students lost a grade (A down to B) at the end of the trimester because they were out of balance and were solely focused on CSS/style. . As an illustration, look at the minima them. Look at the analytics and work that went into it. Leverage off it, don’t recreate it! . Hacks . At the end of this week you should have your theme complements (try altering dark-mode), index.html alterations, a table, multiple external links, and multiple images in your site. . Take a screen shot of temporarily changing remote theme, analyze problems in sight after doing so. Blog your findings. | Time Box fragments are very important to show what you have done each week. I want to see cumulative personal history for the Trimester and for the Year. | You should be able to show how you have considered naming an Tagging to help you find materials under categories. | You should be able to show how you have considered search and how you are able to find key elements in your site. | Advanced and part of what would be considered Coding…. Look at how blog or tags is displayed, look at adding data to _config.yml. Look at liquid, put all this together to make a table or time box the lazy programmer way. | .",
            "url": "https://nighthawkcoders.github.io/APCSP/techtalk/html",
            "relUrl": "/techtalk/html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Agile, Roles, Issues, and Scrum Board",
            "content": "Agile Methodology . . Agile software development uses practices such as pair programming, test-driven development, stand-ups, planning sessions, and sprints. Agile includes the 12 Principles expressed in the Manifesto for Agile Software Development. . . Roles . To ensure transparency during the sprint the Team should meet daily at the daily scrum ( sometimes called a standup). As adaptation for classroom, Team should have a standup meeting for weekly plans, should have assignments for tasks, assignments for integration and deployment. . Scrum Master: The scrum master helps to facilitate the sprint by ensuring that an agile framework is followed. He/she is committed to tracking issues and maintaining scrum boards, but should also remain flexible and open to opportunities for the team to improve their workflow. | DevOps: DevOps is the combination of cultural philosophies, practices, and tools that increases an team’s ability to deliver applications and services at high velocity: version control, integration, managing dependencies, POM file management, AWS deployment are some of the key functions that impact velocity. | Development Team: The development team can be comprised of all kinds of people including designers, writers, presenters, developers, etc. Two key roles in Web Development are … Frontend Developer: A front-end developer builds the front-end portion of websites and web applications—that is, the part that users actually see and interact with. | Backend Developer: Back-end developers a build and maintain the mechanisms that process data and perform actions like data storage, security, and other server-side functions that you cannot see. | . | . Workload . When planning there is an expectation of time. . Individual in Class Time. You should expect 3 to 4 hours of productive classroom work each week. | Individual at Home Time. To maintain pace in this class, you should consider a 2 hour coding or design session (weekly) outside of class time. | Sprint Calculation Time. 5-6 hours of coding or planning per week per individual, or 20-24 hours per team. If we had a two week Sprint this would be 40-48 hours of work. | Key to success. Make great use of time in class. Pair share programming typically provides three time dividend over individual programming when you are learning something new. | . Issues . Sprint cadences have ideas/issues that are broken into short term work units called tasks. . Scrum Board / GitHub Project / Kanban Style . The Scrum Board contains issues that are assigned to individuals, each of these issues will have tangible deliverable links (code/video/…). Scrum Team will use Scrum Board to understand everyone’s ideas and efforts. This includes individual tasks. Use GitHub Projects add Issues to the board. Issues are placed in columns on a Scrum Board (Kanban) to represent progress. The below columns have been successful in our academic environment. . To do/backlog | In progress | Complete | Deployed | Done | Sprint . Sprint is a period of time that Team uses to plan work and execute work. This includes planning, research, development, deployment, and test. Typically, sprints will be 2 weeks or longer in the classroom. Anytime a sprint lasts longer than a week, there will be a weekly Review Tickets (formative assessment) and concluding with an end of Review Ticket (summative assessment). Sample sprint follows… . Week 1 Monday - Sprint Objectives, Scrum Team Planning | Tuesday - Test Prep Tuesday (Student Led) | Wednesday - Code, Code, Code | Thursday - Tech Talk (Teacher) | Friday - Code, Code, Code; Teacher 1 v 2, formative review | 2 hours outside of class for project work | . | Week 2 Monday - Sprint Crossover Grading, Scrum Team Planning | Tuesday - Test Prep Tuesday (Student Led) | Wednesday - Code, Code, Code | Thursday - Tech Talk (Teacher) | Friday - Code, Code, Code; Teacher 1 v 4 including Demos/Review Ticket/Peer, summative review | 2 hours outside of class for project work | . | . 7 Important Transferable Skills . Assessments / Reviews . During Teacher reviews meetings ( 1 v 2 pair, 1 v 4 team), the pair or team will provide Teacher with an Issues that that will be called a Review Ticket. The issue will be completed, it will reference Tasks Completed and Self/Crossover Score(s). Canvas should be used as a guide to completing a review ticket, make sure you account for everything. Make sure Point total is a the top of ticket, if points are important to you! All assessments will be looking for these 7 elements in your work… . Creativity Creativity doesn’t necessarily mean you paint or draw or sculpt well. Creativity in education and workplace, in many cases, presents itself in terms of how you approach tasks and solve problems, Do you both inside and outside of the box for solutions? Or, do you stick to a planned system? If you solve even the smallest problem, you’ve demonstrated creativity. This skill scales up: Big problems are enlarged small problems; small problems scaled are big problems. Conceptualize problems and solutions | Display foresight | Make connections | Make intelligent inferences | Synthesize ideas and data | . | Critical thinking Solving complex or abstract problems requires critical thinking, especially when the problems are critical. Not only that, but critical thinking skills also enable the discovery of deficiencies that could cause less than optimal results. The ability to take a step back and look at things more critically and say ‘Where might we have to have gotten this wrong?’ or ‘How might we be able to improve this?’ is critical thinking. IIf you can articulate this skill you will stand out! | Critical thinkers head off problems before they arise. And if they do surface, they take them head-on. | . | Communication Effective communication is the crux of everything you do.. It doesn’t matter how creative or intelligent you are, or how many computer languages you know: If you can’t communicate well, your other skills are meaningless. Students are encouraged to talk about how they were able to bring their teams together. Verbal skills. How do you address an audience in terms they can understand. | Listening skills. Learning and understanding without defensiveness. | Writing skills. You need to be able to write in such a way that non-experts will understand. | Technological communication skills. You should be able to discuss highly technical hard skills in a way appropriate to your audience. Communication details are not the same for all audiences. | . | Collaboration through Leadership Leadership skills generally encompass communication, problem-solving and managing conflict, relationship building and being able to get people on your team on board with a mission or project. Leaders are big-picture thinkers who take various interests into account when making major decisions. Leaders are responsible for: Delegating responsibility | Demonstrating effective time management | Initiating new ideas | Major decision-making | Managing conflict | Managing groups | Multitasking | Teaching and mentoring | . | Collaboration - Teamwork Individuals that work well with others. This is a important category mentioned in early school. But it applies to High School, College and adults. Trust is the major difference between working alone versus working in groups. And trust can be hard: Some people are skeptical by nature or want to work through an entire project lifecycle solo. But placing trust in an active, dynamic team provides more than just project completion. Teamwork — a sense of community — elevates spirits and improves productivity. Accepting responsibility | Making and implementing decisions | Managing time wisely | Meeting both short- and long-term goals | Organizing | Setting and meeting deadlines | . | Researching Research is not a process performed by Teacher, Boss, or some upstream process. Everything you do in Technology requires research. Research is a key part of the lifecycle: changing plans, fluctuating results, and roadblocks require research before anyone can take action. Conversing with team members is a form of research: If you’ve asked a peer’s opinion on a technical matter, you’ve performed research. Analyzing information | Brainstorming solutions | Delineating needs and requirements | Extracting information from data | Gathering information | Forecasting possible roadblocks | Setting goals | Solving problems | . | Technical We live in a tech-heavy world, and you need to understand the tech your project requires. Try to stay current with the many technical advancements on your project. Make sure that play with the different softwares and platforms that are part of your environment. Be knowledgeable and speak to the technical things that you are learning. Being easy to work with | Quick to learn | Glad to learn | Failing and always willing to try new things | Willing to open new doors in case of a drastic oversight | . | Hacks . Key deliverables of this Tech Talk… . Build Team Agile Methodology Diagram, add Team Member roles | Create a Scrum Board as output of Team Stand-up Meeting | Build an individual Issue | Add to PBL vocabulary on your GH Pages | .",
            "url": "https://nighthawkcoders.github.io/APCSP/techtalk/agile",
            "relUrl": "/techtalk/agile",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Data Abstraction in Python",
            "content": "Data Abstraction - Week 2 . As you use Python, as with all programming languages, managing data is a key skill. Data abstraction is the reduction of a particular body of data to a simplified representation of the whole. Or in other words, something that is easier for the developer to understand. Data Abstraction, along with Procedural Abstraction, are the keys making successful programs. Data Abstraction is vital when sharing data amongst developers, sharing data across the internet, or working in technologies like BioMed, Data Science, etc. . Variables are a way to name, store, data and reference data. We have started working with variables in our last sprint. Lists and Dictionaries are variables with extended features for storing and retrieving data. Lists, think of [] square brackets, are a way of grouping data in an ordered sequence, and will be a big part of the requirement for the College Board Create Task project. All students will need to become proficient in lists to do well in the class and succeed in the AP exam. | Dictionaries, think of {} curly braces, are a way of grouping data into in key-value relationships. Dictionaries are similar to JavaScript Object Notation (JSON). Knowledge of Dictionaries and JSON is key to Web Development. | . | . Daily Plans Week 2 . Introduce some concepts in College Board: Big Idea 2 Data (All Sections), College Board: Big Idea Section 3.2 Data Abstraction. . Monday: Introduction for Week. “Live Review” with full Table (4s). Start review topics in College Board. Build your vocabulary blog. | Tuesday: Test Prep - Discuss Lists and Dictionaries | Wednesday: Tech Talk - Practice Pair Programming Habit of 25 minutes/25 minutes each having 1 commit on Wednesday and prepare comment for next weeks review. | Thursday: Human Day - Anthony and Sahil blogging interests and progress in CS. | Friday: HTML fragments, including behind the Scenes Layout, Code/Code/Code, Completing canvas assignment | .",
            "url": "https://nighthawkcoders.github.io/APCSP/week/2",
            "relUrl": "/week/2",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Lists, Dictionaries, Iteration",
            "content": "Lists and Dictionaries . As a quick review we used variables in the introduction last week. Variables all have a type: String, Integer, Float, List and Dictionary are some key types. In Python, variables are given a type at assignment, Types are important to understand and will impact operations, as we saw when we were required to user str() function in concatenation. . Developers often think of variables as primitives or collections. Look at this example and see if you can see hypothesize the difference between a primitive and a collection. | Take a minute and see if you can reference other elements in the list or other keys in the dictionary. Show output. | # variable of type string print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) name = &quot;John Doe&quot; print(&quot;name&quot;, name, type(name)) print() # variable of type integer print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) age = 18 print(&quot;age&quot;, age, type(age)) print() # variable of type float print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) score = 90.0 print(&quot;score&quot;, score, type(score)) print() # variable of type list (many values in one variable) print(&quot;What is variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection?&quot;) print(&quot;What is different about the list output?&quot;) langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Java&quot;] print(&quot;langs&quot;, langs, type(langs), &quot;length&quot;, len(langs)) print(&quot;- langs[0]&quot;, langs[0], type(langs[0])) print() # variable of type dictionary (a group of keys and values) print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) print(&quot;What is different about the dictionary output?&quot;) person = { &quot;name&quot;: name, &quot;age&quot;: age, &quot;score&quot;: score, &quot;langs&quot;: langs } print(&quot;person&quot;, person, type(person), &quot;length&quot;, len(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) . List and Dictionary purpose . Our society is being built on information. List and Dictionaries are used to collect information. Mostly, when information is collected it is formed into patterns. As that pattern is established you will be able collect many instances of that pattern. . List is used to collect many instances of a pattern | Dictionary is used to define data patterns. | Iteration is often used to process through lists. | . To start exploring more deeply into List, Dictionary and Iteration this example will explore constructing a List of people and cars. . As we learned above, a List is a data type: class &#39;list&#39; | A &#39;list&#39; data type has the method &#39;.append(expression)&#39; that allows you to add to the list. A class usually has extra method to support working with its objects/instances. | In the example below, the expression is appended to the &#39;list&#39; is the data type: class &#39;dict&#39; | At the end, you see a fairly complicated data structure. This is a list of dictionaries, or a collection of many similar data patterns. The output looks similar to JavaScript Object Notation (JSON), Jekyll/GitHub pages yml files, FastPages Front Matter. As discussed we will see this key/value patter often, you will be required to understand this data structure and understand the parts. Just believe it is peasy ;) and it will become so. | . InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Mortensen&quot;, &quot;DOB&quot;: &quot;October 21&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;jmortensen@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;2015-Fusion&quot;, &quot;2011-Ranger&quot;, &quot;2003-Excursion&quot;, &quot;1997-F350&quot;, &quot;1969-Cadillac&quot;] }) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Sunny&quot;, &quot;LastName&quot;: &quot;Naidu&quot;, &quot;DOB&quot;: &quot;August 2&quot;, &quot;Residence&quot;: &quot;Temecula&quot;, &quot;Email&quot;: &quot;snaidu@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;4Runner&quot;] }) # Print the data structure print(InfoDb) . [{&#39;FirstName&#39;: &#39;John&#39;, &#39;LastName&#39;: &#39;Mortensen&#39;, &#39;DOB&#39;: &#39;October 21&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;jmortensen@powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;2015-Fusion&#39;, &#39;2011-Ranger&#39;, &#39;2003-Excursion&#39;, &#39;1997-F350&#39;, &#39;1969-Cadillac&#39;]}, {&#39;FirstName&#39;: &#39;Sunny&#39;, &#39;LastName&#39;: &#39;Naidu&#39;, &#39;DOB&#39;: &#39;August 2&#39;, &#39;Residence&#39;: &#39;Temecula&#39;, &#39;Email&#39;: &#39;snaidu@powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;4Runner&#39;]}] . Formatted output of List/Dictionary - for loop . Managing data in Lists and Dictionaries is for the convenience of passing the data across the internet, to applications, or preparing it to be stored into a database. It is a great way to exchange data between programs and programmers. Exchange of data between programs includes the data type the method/function and the format of the data type. These concepts are key to learning how to write functions, receive, and return data. This process is often referred to as an Application Programming Interface (API). . Next, we will take the stored data and output it within our notebook. There are multiple steps to this process... . Preparing a function to format the data, the print_data() function receives a parameter called &quot;d_rec&quot; short for dictionary record. It then references different keys within [] square brackets. | Preparing a function to iterate through the list, the for_loop() function uses an enhanced for loop that pull record by record out of InfoDb until the list is empty. Each time through the loop it call print_data(record), which passes the dictionary record to that function. | Finally, you need to activate your function with the call to the defined function for_loop(). Functions are defined, not activated until they are called. By placing for_loop() at the left margin the function is activated. | . # print function: given a dictionary of InfoDb content def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print() # for loop algorithm iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner . Alternate methods for iteration - while loop . In coding, there are usually many ways to achieve the same result. Defined are functions illustrating using index to reference records in a list, these methods are called a &quot;while&quot; loop and &quot;recursion&quot;. . The while_loop() function contains a while loop, &quot;while i &lt; len(InfoDb):&quot;. This counts through the elements in the list start at zero, and passes the record to print_data() | . # while loop algorithm contains an initial n and an index incrementing statement (n += 1) def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . While loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner . Calling a function repeatedly - recursion . This final technique achieves looping by calling itself repeatedly. . recursive_loop(i) function is primed with the value 0 on its activation with &quot;recursive_loop(0)&quot; | the last statement indented inside the if statement &quot;recursive_loop(i + 1)&quot; activates another call to the recursive_loop(i) function, each time i is increasing | ultimately the &quot;if i &lt; len(InfoDb):&quot; will evaluate to false and the program ends | . # recursion algorithm loops incrementing on each call (n + 1) until exit condition is met def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Hacks . Add a couple of records to the InfoDb | Try to do a for loop with an index | Pair Share code somethings creative or unique, with loops and data. Hints... Would it be possible to output data in a reverse order? | Are there other methods that can be performed on lists? | Could you create new or add to dictionary data set? Could you do it with input? | Make a quiz that stores in a List of Dictionaries. | . | .",
            "url": "https://nighthawkcoders.github.io/APCSP/collegeboard/python_lists",
            "relUrl": "/collegeboard/python_lists",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Data Abstraction Points",
            "content": "Points will be awarded on these three key elements . Python Tech Talk . It is important that you create your own InfoDb.  This must be a data capture of your own interest.  The Jupyter page should include.  There must be a pair element in the programming. . Cell focused on InfoDb database definition.   | Function(s) that focus on printing your InfoDb according to your data abstraction and data definition requirements | Independent cells that show your data work with For loop, For loop with index, While Loop, and Recursion | The page needs Markdown and Code cells. Markdown sections should describe objective and purpose at the beginning, as well as describe each of the Code cells.  Additionally, each Python cell should contain comments. | . HTML/Markdown Fragments.  . As we are learning Lists, this week I believe it is very important for each student to build a Table.  This can be done in markdown or html.   This should have individual look, collaboration is OK, but you must have a distinct table. . This to be something “Productive”. | This requires you to use {{ }} liquid syntax somewhere in the table.  Please make sure you comment source of this key/value. | Add a little flair for that extra appeal. An idea, is to add Input to adding records to InfoDb (combining learnings from last lesson). Don’t show up with a straight copy, this will not be meeting expectations. | . Live Grading Presentation.  . Each individual needs to perform their own work and updates.  However, I would like you to work with the same InfoDB as your pair.   In presentation, consider the following… . Each individual contains two looping algorithms in their own repository.  All four are covered between pair. | Be sure to discuss your HTML/Markdown table and any additional flair | Every time requirements Create Comment in Python Blog.  Crossover grades, Crossover Comments, and Blog(s) used during week. | Be prepared to go fast, but show everything we should be under 5 minutes.  3.5 minutes is preferred time for 4 people. | Jupyter Notebooks contain comments and Markdown cells | Output of Jupyter code is required | . | .",
            "url": "https://nighthawkcoders.github.io/APCSP/points/2",
            "relUrl": "/points/2",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Installation Checks",
            "content": "Python Checks . python --version python2 --version . Python 3.9.12 bash: python2: command not found . . Conda Packages . conda list . # packages in environment at /Users/johnmortensen/opt/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39hecd8cb5_1 aiohttp 3.8.1 py39hca72f7f_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39hecd8cb5_0 anaconda-navigator 2.2.0 py39hecd8cb5_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39hecd8cb5_0 appdirs 1.4.4 pyhd3eb1b0_0 applaunchservices 0.2.1 pyhd3eb1b0_0 appnope 0.1.2 py39hecd8cb5_1001 appscript 1.1.2 py39h9ed2024_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39hca72f7f_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39hecd8cb5_0 astropy 5.0.4 py39h67323c0_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39h9ed2024_0 beautifulsoup4 4.11.1 py39hecd8cb5_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39hca72f7f_0 bkcharts 0.2 py39hecd8cb5_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h2842e9f_0 bokeh 2.4.2 py39hecd8cb5_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39h67323c0_0 brotli 1.0.9 hb1e8313_2 brotlipy 0.7.0 py39h9ed2024_1003 brunsli 0.1 h23ab428_0 bzip2 1.0.8 h1de35cc_0 c-ares 1.18.1 hca72f7f_0 ca-certificates 2022.3.29 hecd8cb5_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39hecd8cb5_2 cffi 1.15.0 py39hc55c11b_1 cfitsio 3.470 hee0f690_6 chardet 4.0.0 py39hecd8cb5_1003 charls 2.2.0 h23ab428_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39hecd8cb5_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39hecd8cb5_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39hecd8cb5_0 conda-build 3.21.8 py39hecd8cb5_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39hca72f7f_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39h2fd3fbb_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 hca72f7f_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39he9d5cce_0 cytoolz 0.11.0 py39h9ed2024_0 daal4py 2021.5.0 py39h24a4e90_0 dal 2021.5.0 hecd8cb5_782 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39hecd8cb5_1 debugpy 1.5.1 py39he9d5cce_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39hecd8cb5_1 entrypoints 0.4 py39hecd8cb5_0 et_xmlfile 1.1.0 py39hecd8cb5_0 executing 0.8.3 pyhd3eb1b0_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 hd8bbffd_0 frozenlist 1.2.0 py39hca72f7f_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39hecd8cb5_1 gensim 4.1.2 py39he9d5cce_0 giflib 5.2.1 haf1e3a3_0 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h23ab428_2 gmpy2 2.1.2 py39hd5de756_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h9ed2024_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39hecd8cb5_0 greenlet 1.1.1 py39h23ab428_0 grpcio 1.42.0 py39ha29bfda_0 h5py 3.6.0 py39h4a1dd59_0 hdf5 1.10.6 hdbbcd12_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 h0a44026_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39ha952a84_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39hecd8cb5_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39hecd8cb5_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 hecd8cb5_3538 interchange 2021.0.4 pypi_0 pypi intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39hecd8cb5_0 ipython 8.2.0 py39hecd8cb5_0 ipython-cypher 0.2.6 pypi_0 pypi ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39hecd8cb5_1 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e hca72f7f_0 jq 1.6 h9ed2024_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39hecd8cb5_0 jupyter 1.0.0 py39hecd8cb5_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39hecd8cb5_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 haf1e3a3_2 keyring 23.4.0 py39hecd8cb5_0 kiwisolver 1.3.2 py39he9d5cce_0 krb5 1.19.2 hcd88c3b_0 lazy-object-proxy 1.6.0 py39h9ed2024_0 lcms2 2.12 hf1fd2bf_0 lerc 3.0 he9d5cce_0 libaec 1.0.4 hb1e8313_1 libarchive 3.4.2 haa3ed63_0 libcrc32c 1.1.1 hb1e8313_2 libcurl 7.82.0 h6dfd666_0 libcxx 12.0.0 h2f01273_0 libdeflate 1.8 h9ed2024_5 libedit 3.1.20210910 hca72f7f_0 libev 4.33 h9ed2024_1 libffi 3.3 hb1e8313_2 libgfortran 3.0.1 h93005f0_2 libiconv 1.16 hca72f7f_2 libidn2 2.3.2 h9ed2024_0 liblief 0.11.5 he9d5cce_1 libllvm11 11.1.0 h46f1229_1 libnghttp2 1.46.0 ha29bfda_0 libpng 1.6.37 ha441bb4_0 libprotobuf 3.19.1 h8346a28_0 libsodium 1.0.18 h1de35cc_0 libspatialindex 1.9.3 h23ab428_0 libssh2 1.10.0 h0a4fc7d_0 libtiff 4.2.0 h87d7836_0 libunistring 0.9.10 h9ed2024_0 libwebp 1.2.2 h56c3ce4_0 libwebp-base 1.2.2 hca72f7f_0 libxml2 2.9.12 hcdb78fc_0 libxslt 1.1.34 h83b36ba_0 libzopfli 1.0.3 hb1e8313_0 llvm-openmp 12.0.0 h0dcd299_1 llvmlite 0.38.0 py39h8346a28_0 locket 0.2.1 py39hecd8cb5_2 lxml 4.8.0 py39h65b224f_0 lz4-c 1.9.3 h23ab428_1 lzo 2.10 haf1e3a3_2 markdown 3.3.4 py39hecd8cb5_0 markupsafe 2.0.1 py39h9ed2024_0 matplotlib 3.5.1 py39hecd8cb5_1 matplotlib-base 3.5.1 py39hfb0c5b7_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39hecd8cb5_1 mistune 0.8.4 py39h9ed2024_1000 mkl 2021.4.0 hecd8cb5_637 mkl-service 2.4.0 py39h9ed2024_0 mkl_fft 1.3.1 py39h4ab4a9b_0 mkl_random 1.2.2 py39hb2f4e1b_0 mock 4.0.3 pyhd3eb1b0_0 monotonic 1.6 pypi_0 pypi mpc 1.1.0 h6ef4df4_1 mpfr 4.0.2 h9066e36_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39hecd8cb5_0 msgpack-python 1.0.2 py39hf7b0b51_1 multidict 5.2.0 py39hca72f7f_2 multipledispatch 0.6.0 py39hecd8cb5_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39hecd8cb5_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39hecd8cb5_0 nbconvert 6.4.4 py39hecd8cb5_0 nbformat 5.3.0 py39hecd8cb5_0 ncurses 6.3 hca72f7f_2 neo4jrestclient 2.1.1 pypi_0 pypi neo4jupyter 0.2.0 pypi_0 pypi nest-asyncio 1.5.5 py39hecd8cb5_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 10.13.0 h0a44026_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39hecd8cb5_0 numba 0.55.1 py39hae1ba45_0 numexpr 2.8.1 py39h2e5f0a9_0 numpy 1.21.5 py39h2e5f0a9_1 numpy-base 1.21.5 py39h3b1a694_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h9ed2024_0 openjpeg 2.4.0 h66ea3da_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n hca72f7f_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39he9d5cce_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39hecd8cb5_0 pansi 2020.7.3 pypi_0 pypi param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39hecd8cb5_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 pathspec 0.7.0 py_0 patsy 0.5.2 py39hecd8cb5_1 pep8 1.7.1 py39hecd8cb5_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39hde71d04_0 pip 21.2.4 py39hecd8cb5_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39hecd8cb5_1 poyo 0.5.0 pyhd3eb1b0_0 prettytable 3.3.0 pypi_0 pypi prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39he9d5cce_0 psutil 5.8.0 py39h9ed2024_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39he9d5cce_1 py2neo 2021.2.3 pypi_0 pypi pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h9ed2024_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39hecd8cb5_0 pycurl 7.44.1 py39hbcfaee0_1 pydispatcher 2.0.5 py39hecd8cb5_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h9ed2024_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39hecd8cb5_0 pylint 2.9.6 py39hecd8cb5_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39he9d5cce_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h23ab428_6 pyrsistent 0.18.0 py39hca72f7f_0 pysocks 1.7.1 py39hecd8cb5_0 pytables 3.6.1 py39h648f197_1 pytest 7.1.1 py39hecd8cb5_0 python 3.9.12 hdfd78df_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h23ab428_3 python.app 3 py39hca72f7f_0 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39hca72f7f_0 pyyaml 6.0 py39hca72f7f_1 pyzmq 22.3.0 py39he9d5cce_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h468cd18_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39hecd8cb5_0 readline 8.1.2 hca72f7f_1 regex 2022.3.15 py39hca72f7f_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39hecd8cb5_1 ruamel_yaml 0.15.100 py39h9ed2024_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39hae1ba45_0 scikit-learn 1.0.2 py39hae1ba45_1 scikit-learn-intelex 2021.5.0 py39hecd8cb5_0 scipy 1.7.3 py39h8c7af03_0 scrapy 2.6.1 py39hecd8cb5_0 seaborn 0.11.2 pyhd3eb1b0_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39hecd8cb5_0 sip 4.19.13 py39h23ab428_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 he9d5cce_0 sniffio 1.2.0 py39hecd8cb5_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39hecd8cb5_1 spyder-kernels 2.1.3 py39hecd8cb5_0 sqlalchemy 1.4.32 py39hca72f7f_0 sqlite 3.38.2 h707629a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39hca72f7f_0 sympy 1.10.1 py39hecd8cb5_0 tabulate 0.8.9 py39hecd8cb5_0 tbb 2021.5.0 haf03e11_0 tbb4py 2021.5.0 py39haf03e11_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39hecd8cb5_0 terminado 0.13.1 py39hecd8cb5_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h7bc2e8c_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h9ed2024_0 tqdm 4.64.0 py39hecd8cb5_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39hca72f7f_0 typed-ast 1.4.3 py39h9ed2024_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39he9d5cce_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 haf1e3a3_0 urllib3 1.26.9 py39hecd8cb5_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h999c104_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39hecd8cb5_1 websocket-client 0.58.0 py39hecd8cb5_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h6dfd666_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39hecd8cb5_0 wrapt 1.12.1 py39h9ed2024_1 wurlitzer 3.0.2 py39hecd8cb5_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xlwings 0.24.9 py39hecd8cb5_0 xz 5.2.5 h1de35cc_0 yaml 0.2.5 haf1e3a3_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h9ed2024_0 zeromq 4.3.4 h23ab428_0 zfp 0.5.5 he9d5cce_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h4dc903c_2 zope 1.0 py39hecd8cb5_1 zope.interface 5.4.0 py39h9ed2024_0 zstd 1.4.9 h322a384_0 . echo Conda Check # test for a kernel installation test=&quot;jupyter&quot; # keyword check=`conda list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . Conda Check jupyter 1.0.0 py39hecd8cb5_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39hecd8cb5_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 neo4jupyter 0.2.0 pypi_0 pypi . Jupyter Checks . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: java /Users/johnmortensen/Library/Jupyter/kernels/java javascript /Users/johnmortensen/Library/Jupyter/kernels/javascript python3 /Users/johnmortensen/opt/anaconda3/share/jupyter/kernels/python3 bash /usr/local/share/jupyter/kernels/bash . test=&quot;python3&quot; # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . python3 /Users/johnmortensen/opt/anaconda3/share/jupyter/kernels/python3 .",
            "url": "https://nighthawkcoders.github.io/APCSP/techtalk/bash_checks",
            "relUrl": "/techtalk/bash_checks",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Focus and Habits - Yale Professor on Successful People",
            "content": "Psychology and the Good Life, by Laurie Santos . This video is very relevant to students. Laurie Santos is a professor at Yale has produced one of the most popular classes of all time at Yale (1 of 4 students take this class). . Teacher Notes . In my first watch of this video, right after 2021-2022 school year, these were my observations in improving the well being of Computer Science at Del Norte. . The Teacher needs to reduce academic stress on students. | The Teacher needs to convince Students to form habits of successful people, as discussed in the video. These habits need to be formed collaboratively between Teacher and Student. | Students need to strive to form an attitude of success for life. This takes effort and commitment. Similar to exercise analogies discussed in video. | In active discussions with Ms Naidu who taught at Del Norte in 2021-2022, we determined the biggest weakness in students our students is Collaboration, not Technical. | Laure Santos request that students be grateful for their current situation. | . Teacher Message . The AP Computer Science classes at Del Norte in 2022-2023 is structured to do most of the work in the classroom. Students, please prioritize the 4C habits: Collaboration, Communication, Critical Thinking and Creativity in classroom. Additionally, focus, ask questions, Code/Code/Code, and make mistakes. If you do these things, you are in danger of getting 90% on all your assignments. . Agile and Psychology of the Good Life . A lot of the way we go Agile, Sprints, and Scrums is helping to establish habits and focus. As Engineers, we need to learn to put things together and not consider everything as disparate. . Habit helpers: Stand-up meetings, Issues, Scrum Board, Review Tickets, Sprints | Focus helpers: Reviewing Issues, Pair Coding, Making mistakes, Fixing Bugs, Scrum accountability | . Hacks . Watch and build a vocabulary on the “Psychology and the Good Life” and maintain it on GH Pages, look for connections between Good Life and Agile. | Write a note of gratitude to someone on campus and someone at home, record your experience in GH Pages. | Start your own personal journey into Computer Science using experience and inspiration from Anthony and Sahil | .",
            "url": "https://nighthawkcoders.github.io/APCSP/techtalk/focus",
            "relUrl": "/techtalk/focus",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Fastpages Frontend Development - Tour of GitHub Pages",
            "content": "Tour of Fastpages . . GitHub Pages is a static site hosting service that takes files straight from a repository on GitHub,runs the files through a build process, and publishes a website. Fastpages is built on top of GitHub pages. Fastpages automates the process of creating blog posts, so you don’t have to manually run conversion scripts. This tour begins by looking at Explorer in VS Code. There are three automations to a GH Pages / Fastpages website... . _notebooks: jupyter .ipynb files. This allows building block of markdown, python, java, javascript into a jupyter notebook. | _posts: markdown .md files. This supports frontend web design with markdown, html, and javascript. | _word: word .docx files. This allows you to save Microsoft or Goggle documents into a docx format. Saving these directly to _word folder will streamline steps. | . Read more or review files in the fastpages README.md . . Resources . There are many resources, tutorials, and reference for building pages with HTML and Markdown. On these subjects, I would say learn it when you need it. Right clicking on Chrome provides View Page Source on any link on the Web. The APCSA/APCSP projects have many examples within these projects. Here are a couple of Web links I often find through google or refer to when looking for ideas … . HTML on W3Schools | Markdown Cheat Sheet | . Home Page . The Home page is sourced by the index.html file. This is the file to personalize and customize your Fastpages home page. BTW, index.html is the standard name for your web sites landing page. GH Pages / Fastpages builds allows you to mix Markdown and HTML within the index.html file. . Sub Pages . Look under _pages folder within the Navigator. In this directory, there are several .md files. These allow a combination of HTML and Markdown. Observe that this project has prefix of 01, 02, 03 on the .md files allows control the order of menus from left to right… . 01_search.md: This provides a very cool search on the site. The search.md is renamed but the contents are untouched from fastpages project. | 02_tags.md: This provide a very cool tagging system that is related to the “categories: categoryname” that are seen at the top of all the GH Pages / Fastpages _posts. This tags.md is renamed but the contents are untouched from fastpages project. | 03_about.md: This page is left for your individual customization, similar to index.html | Developers can add .md file of choice and order according to preference. | . Images . Look under images folder and you will see files added to support the site. Some are for customization of the site others are for pages. . Site: favicon.ico, logo.png | Pages: agile.webp, apcsp.png | . GH Pages YAML files . The _config.yml has many strings and preferences that are specific to the site. The file is full of comments that describe what can be changed and what should remain untouched. Note, the .yml files will be seen again as we begin to deploy our own site with Docker. . Hacks . Personalize index.html file and build your own Fastpages / GH Pages for personal use throughout the year. . Add _pages/notes.md or _pages/vocab.md, insert between tags.md and about.md. Use this area to capture idea and terms throughout the year. | Add some personal study or work pages. Consider how you will use these in conjunction with notes/vocab pages, search, and tagging. Publish _notebook file | Publish _post file with image | Publish _docx file from Google Doc source | . | . Extra Credit . Consider re-designing and using your home page for this class and for other subjects, other than Computer Science. The searching and tagging features are very powerful and could help recall notes from any class. .",
            "url": "https://nighthawkcoders.github.io/APCSP/techtalk/fastpages",
            "relUrl": "/techtalk/fastpages",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Bash Tutorial",
            "content": "Prerequisites for Bash on Jupyter . Being able to find a Bash Reference. Here is a Bash Cheat Sheet Install the Bash Kernel for Jupyter notebooks. Expectations are pip3 and python3 are defined within the path. The bash shell allowed construction of this tutorial. . pip install bash_kernel | python -m bash_kernel.install | . Selecting a kernel in &quot;code --project--&quot; or &quot;jupyter notebook --file.ipynb--&quot; that have bash in options. . Prerequisites for Project Directory . Practice pulling code from git to your machine. This will create a project directory and add APCSP github project to the directory. There is conditional logic to make sure that directory and pull only happen if it does not (!) exist. . Hack:Change variables, make new directory, clone to that directory. | . echo &quot;Using conditional statement to create a project directory and project&quot; # Variable section export project_dir=$HOME/vscode # change vscode to different name to test git clone export project=$project_dir/APCSP # change APCSP to name of project from git clone export project_repo=&quot;https://github.com/nighthawkcoders/APCSP.git&quot; # change to project of choice cd ~ # start in home directory # Conditional block to make a project directory if [ ! -d $project_dir ] then echo &quot;Directory $project_dir does not exists... makinng directory $project_dir&quot; mkdir -p $project_dir fi echo &quot;Directory $project_dir exists.&quot; # Conditional block to git clone a project from project_repo if [ ! -d $project ] then echo &quot;Directory $project does not exists... cloning $project_repo&quot; cd $project_dir git clone $project_repo cd ~ fi echo &quot;Directory $project exists.&quot; . Look inside Fastpages/Github page project . All computers contain files and directories. The clone brought more files from cloud to your machine. Using the bash shell you will see some commands that show and interact with files and directories. . &quot;ls&quot; lists computer files in Unix and Unix-like operating systems | &quot;cd&quot; offers way to navigate and change working directory | &quot;pwd&quot; print working directory | &quot;echo&quot; used to display line of text/string that are passed as an argument | . echo &quot;Navigate to project, then navigate to area wwhere files were cloned&quot; cd $project pwd echo &quot;&quot; echo &quot;list top level or root of files with project pulled from github&quot; ls echo &quot;&quot; echo &quot;list again with hidden files pulled from github&quot; ls -a # hidden files flag, many shell commands have flags echo &quot;&quot; echo &quot;list all files in long format&quot; ls -al # all files and long listing . echo &quot;Look for posts&quot; export posts=$project/_posts # _posts inside project cd $posts # this should exist per fastpages pwd # present working directory ls -l # list posts . echo &quot;Look for notebooks&quot; export notebooks=$project/_notebooks # _notebooks is inside project cd $notebooks # this should exist per fastpages pwd # present working directory ls -l # list notebooks . echo &quot;Look for images in notebooks, print working directory, list files&quot; cd $notebooks/images # this should exist per fastpages pwd ls -l . Look inside a Markdown File . &quot;cat&quot; reads data from the file and gives its content as output . echo &quot;Navigate to project, then navigate to area wwhere files were cloned&quot; cd $project echo &quot;show the contents of README.md&quot; echo &quot;&quot; cat README.md # show contents of file, in this case markdown echo &quot;&quot; echo &quot;end of README.md&quot; . Env, Git and GitHub . Env(ironment) is used to capture things like path to Code or Home directory. Git and GitHub is NOT Only used to exchange code between individuals, it is often used to exchange code through servers, in our case deployment for Website. All tools we use have a behind the scenes hav relationship with the system they run on (MacOS, Windows, Linus) or a relationship with servers which they are connected to (ie GitHub). There is an &quot;env&quot; command in bash. There are environment files and setting files (.git/config) for Git. They both use a key/value concept. . &quot;env&quot; show setting for your shell | &quot;git clone&quot; sets up a director of files | &quot;cd $project&quot; allows user to move inside that directory of files | &quot;.git&quot; is a hidden directory that is used by git to establish relationship between machine and the git server on GitHub. | . echo &quot;Show the shell environment variables, key on left of equal value on right&quot; echo &quot;&quot; env . cd $project echo &quot;&quot; echo &quot;show the secrets of .git&quot; cd .git ls -l echo &quot;&quot; echo &quot;look at config file&quot; cat config . Student Request - Make a file in Bash . This example was requested by a student (Jun Lim, CSA). The request was to make jupyer file using bash, I adapted the request to markdown. This type of thought will have great extrapolation to coding and possibilities of using List, Arrays, or APIs to build user interfaces. JavaScript is a language where building HTML is very common. . To get more interesting output from terminal, this will require using something like mdless (https://github.com/ttscoff/mdless). This enables see markdown in rendered format.- On Desktop Install PKG from MacPorts . In Terminal on MacOS Install ncurses | gem install mdless | . | . Output of the example is much nicer in &quot;jupyter&quot; . cd /tmp file=&quot;sample.md&quot; if [ -f &quot;$file&quot; ]; then rm $file fi tee -a $file &gt;/dev/null &lt;&lt;EOF # Show Generated Markdown This introductory paragraph and this line and the title above are generated using tee with the standard input (&lt;&lt;) redirection operator. - This bulleted element is still part of the tee body. EOF echo &quot;- This bulleted element and lines below are generated using echo with standard output (&gt;&gt;) redirection operator.&quot; &gt;&gt; $file echo &quot;- The list definition, as is, is using space to seperate lines. Thus the use of commas and hyphens in output.&quot; &gt;&gt; $file actions=(&quot;ls,list-directory&quot; &quot;cd,change-directory&quot; &quot;pwd,present-working-directory&quot; &quot;if-then-fi,test-condition&quot; &quot;env,bash-environment-variables&quot; &quot;cat,view-file-contents&quot; &quot;tee,write-to-output&quot; &quot;echo,display-content-of-string&quot; &quot;echo_text_&gt; $file,write-content-to-file&quot; &quot;echo_text_&gt;&gt; $file,append-content-to-file&quot;) for action in ${actions[@]}; do # for loop is very similar to other language, though [@], semi-colon, do are new action=${action//-/ } # convert dash to space action=${action//,/: } # convert comma to colon action=${action//_text_/ &quot;sample text &quot; } # convert _text_ to sample text, note escape character to avoid &quot;&quot; having meaning echo &quot; - ${action//-/ }&quot; &gt;&gt; $file # echo is redirected to file with &gt;&gt; done echo &quot;&quot; echo &quot;File listing and status&quot; ls -l $file # list file wc $file # show words mdless $file # this requires installation, but renders markown from terminal rm $file # clean up termporary file . Hacks . Go back to some of the deployment procedures and think about some thing you could verify through Bash notebook. . Is there anything we use to verify tools we install? Think about versions. | Is there anything we could verify with Anaconda? | How would you update a repository? | Really cool would be automating a procedure from installation. | .",
            "url": "https://nighthawkcoders.github.io/APCSP/techtalk/bash",
            "relUrl": "/techtalk/bash",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Anthony and Sahil's Reflections on Computer Science",
            "content": "Anthony: Computer Science Before APCSA . Hello! My name is Anthony Vo, and I graduated Del Norte with the class of 2022. . My computer science journey started when I was in second grade. Khan Academy used to have a coding portion of its website, and I remember spending hours making programs that drew simple images. There was no logic involved in the coding, but as an introduction, it got me hooked on the subject. Here&#39;s a recreation of a pig that I made using Khan Academy: . . In elementary school, I used Scratch to create a plethora of games. During the summer, I also took ID Tech Camps that taught me more about game design and programming. Though some of these camps weren&#39;t that helpful in learning computer science (Minecraft mapping isn&#39;t a skill I use to day), they furthered my interest in the subject. You can check out some of my scratch projects here. . I took more computer science classes in middle school with the two GTT classes. The classes still worked a lot with Scratch, but in 8th grade, I learned more about HTML, CSS, JavaScript, and Python. Those classes didn&#39;t result in the best programs, but it provided a solid foundation for problem solving and syntax that I continue to build off of today. Below are a few programs that I made in eighth grade (updated to conform to modern Python standards). . &quot;&quot;&quot;Anthony Vo 11-14-17 coinflip.py To practice using random numbers&quot;&quot;&quot; #Imports random module import random #Initializes variables numberOfHeads = 0 numberOfTails = 0 #Flips coins for number in range(20): coinSide = random.randrange(2) if coinSide == 0: numberOfHeads = numberOfHeads + 1 print(&quot;Heads&quot;) else: numberOfTails = numberOfTails + 1 print(&quot;Tails&quot;) #Gives result print(f&quot;Overall, heads was flipped {numberOfHeads} times while tails was flipped {numberOfTails} times.&quot;) . Tails Tails Tails Tails Tails Heads Heads Tails Tails Tails Tails Tails Tails Tails Tails Heads Heads Tails Heads Tails Overall, heads was flipped 5 times while tails was flipped 15 times. . &quot;&quot;&quot;Anthony Vo 11-14-17 fortunecookies.py To practice using random numbers&quot;&quot;&quot; #Imports random module import random #Gives messages whichMessage = random.randrange(5) if whichMessage == 0: print(&quot;You will soon have indigestion due to that fortune cookie.&quot;) elif whichMessage == 1: print(&quot;You will buy more Kung Pao Chicken in the future.&quot;) elif whichMessage == 2: print(&quot;Following this retaurant&#39;s Facebook page will make you prosperous.&quot;) elif whichMessage == 3: print(&quot;If you go to that fake Chinese restaurant Panda Express, you will become poor.&quot;) else: print(&quot;Not eating Chinese cuisine will cause you to have many unlucky days.&quot;) . Following this retaurant&#39;s Facebook page will make you prosperous. . The next computer science class that I took was Mr. Mortensen&#39;s Intro to Computer Science class (which has since been replaced with CSP). This was probably my favorite class in all of high school; hanging out in fifth period with my friends, coding, and having an overall good time was one of the highlights of high school... which probably says something about me ;). I learned how to use GitHub in this class and really collaborate with my peers, which helped me apply my skills to a practical environment. I also learned C which helped me understand more about how computers processed code. Below is a program I made which creates random questions. You can see how much better my programming got after taking this class! . // // main.c // parameterFunctionQuestion(s) // // Created by Vo, Anthony on 9/11/19. // Copyright © 2019 Vo, Anthony. All rights reserved. // #include &lt;stdio.h&gt; #include &lt;stdlib.h&gt; #include &lt;time.h&gt; int questionMaker (double arg1, char operator, double arg2) { //function that creates math questions based off of given paramters int input, randomizer, answer, i, j, seqChecker[4]; double answerSeq[4]; int score = 0, shutOff = 0; srand(time(0)); //initializes score, input, and random seed switch (operator) { case &#39;+&#39;: answer = arg1 + arg2; break; case &#39;-&#39;: answer = arg1 - arg2; break; case &#39;/&#39;: answer = arg1 / arg2; break; case &#39;*&#39;: answer = arg1 * arg2; break; } //determines correct answer double answer1 = arg1 + arg2; double answer2 = arg1 - arg2; double answer3 = arg1 / arg2; double answer4 = arg1 * arg2; //gives possible answers if (answer1 == answer4) { if (operator == &#39;+&#39;) { answer4 = answer1 - (rand() % 100) + 1; } else { answer1 = answer4 - (rand() % 100) + 1; } } if (answer3 == answer4) { if (operator == &#39;*&#39;) { answer3 = answer4 - (rand() % 100) + 1; } else { answer4 = answer3 - (rand() % 100) + 1; } } if (answer2 == answer3) { if (operator == &#39;-&#39;) { answer3 = answer2 - (rand() % 100) + 1; } else { answer2 = answer3 - (rand() % 100) + 1; } } //failsafe for if two answers are the same (i.e. 4 - 2 = 4 / 2) for (i = 0; i &lt; 4; i++) { seqChecker[i] = 0; } //cleans up seqChecker (has some random integers inside of it, not sure why) for (i = 0; i &lt; 4; i++) { while (shutOff == 0) { randomizer = rand() % 4; if (seqChecker[0] != randomizer + 1 &amp;&amp; seqChecker[1] != randomizer + 1 &amp;&amp; seqChecker[2] != randomizer + 1 &amp;&amp; seqChecker[3] != randomizer + 1) { shutOff = 1; } } shutOff = 0; randomizer ++; switch(randomizer) { case 1: answerSeq[i] = answer1; seqChecker[i] = 1; break; case 2: answerSeq[i] = answer2; seqChecker[i] = 2; break; case 3: answerSeq[i] = answer3; seqChecker[i] = 3; break; case 4: answerSeq[i] = answer4; seqChecker[i] = 4; break; } } //randomizes answers printf(&quot;%lf %c %lf is? n&quot;, arg1, operator, arg2); printf(&quot;1) %lf n2) %lf n3) %lf n4) %lf n&quot;, answerSeq[0], answerSeq[1], answerSeq[2], answerSeq[3]); scanf(&quot;%d&quot;, &amp;input); //asks question if (answerSeq[input - 1] == answer) { score++; printf(&quot;Correct! n&quot;); } else { printf(&quot;Incorrect n&quot;); } //checks for correct answer return score; //returns points gained } int main(void) { srand(time(0)); int score = 0, questions = 0; /* int i, operator; for (i = 0; i &lt; (rand() % 5) + 1; i++) { operator = rand() % 4; switch(operator) { case 0: score += questionMaker(rand() % 20 + 1, &#39;+&#39;, rand() % 20 + 1); break; case 1: score += questionMaker(rand() % 20 + 1, &#39;-&#39;, rand() % 20 + 1); break; case 2: score += questionMaker(rand() % 20 + 1, &#39;/&#39;, rand() % 20 + 1); break; case 3: score += questionMaker(rand() % 20 + 1, &#39;*&#39;, rand() % 20 + 1); break; } questions++; } */ //asks random questions (i.e. random arguments and operators) questionMaker(10, &#39;*&#39;, 8); questions++; printf(&quot;Your final score is %d out of %d n&quot;, score, questions); return 0; } . Anthony: My AP CSA Experience . Finally, we&#39;ve reached junior year. I took AP CSA during the quarantine year, and it helped me improve my Object Oriented Programming skills by a lot. My success in the class stemmed mostly from motivation to code; I spent my first periods coding instead of playing Roblox (which was a popular alternative that I did in my English classes), and I made sure to finish all of my assignments on time without copying from others. Mr. Mortensen&#39;s AP study plan also helped a lot. We were required to finish a CollegeBoard unit quiz every week, so I would hop in a Discord call with my group members every Friday to do the quiz together. I have a lot of fond memories of staying up until 2 AM with my friends on Friday to meet Mr. Mortensen&#39;s assignment deadline (admittedly, it was a lot more fun than it sounds). . For success in AP CSA, I would recommend completing everything on time. Though there is a grace period for a lot of assignments, if you fall behind one week and don&#39;t understand a concept, it can quickly snowball out of control. Get on top of your assignments, make sure you understand each week&#39;s concepts, and you&#39;ll succeed. You don&#39;t need to have had years of prior experience like me; you just need to try your best to understand and work on each week&#39;s work. . After junior year, I realized that I had a big hole in my repretoire. I could code well, sure, but I couldn&#39;t actually present or make anything of substance. So, as I chose senior classes, I decided on CSP to work on my web development skills. I spent the summer writing college essays, playing League of Legends, and hanging out. I also found out that I got a 5 on the AP CSA exam! When fall came, I was ready to begin creating polished websites. During that first trimester, I met a new friend... . Sahil: Starting Out . Hey, I&#39;m Sahil Samar. I&#39;m currently a senior at Del Norte, in the graduating class of 2023. . My computer science journey started out in around 8th grade when I got interested in game development. But game development was a super hard thing to start with! Unity uses a language called C#, and I didn&#39;t have any idea how to use it. I didn&#39;t really understand the architecture of Unity or C# at first; I just kind of dove in and started making projects. I would look up what I didn&#39;t know, and just copy paste in code to get things working. Even this was hard, because when something went wrong I had no idea how to fix it. But with way too many hours, I was able to make some projects. It isn&#39;t easy to get started getting into coding! By the time I got to AP CSP, I still had a lot to learn about the coding mindset. . My very first game, 3D Pong: . . Sahil: AP CSP . When I got to AP CSP, I still didn&#39;t really have an idea of how coding worked. I just knew how to find code and paste it into my project. But slowly, I began moving away from this. I met Anthony Vo, who you just read a little bit about, in my first trimester. Whenever I didn&#39;t understand something, he would always help me out. He wouldn&#39;t give me code to copy paste though. He would actually explain the code to me, so I could do it myself. This was huge for me, since I actually began to think about my code and be able to develop things on my own. Mr. Mortensen guided me through countless problems, but everytime I asked him for help I walked away with some new understanding of how to debug my code. At the start of the trimester, I would go up to Mr. Mortensen or Anthony as soon as I had a problem. But by the end of the year, I only used them as a last resort, after I had truly tried everything. At that point, I just needed a pair of fresh eyes, and not someone to guide me through the whole process. Moral of the story: you aren&#39;t expected to come in an expert at coding! But, if you use your resources properly, you can use this year to grow. You can develop the mindset of a programmer and learn how to create cool projects and debug your issues when things don&#39;t work out. . Sahil: After AP CSP . AP CSP shaped me to be the coder I am today; but you only get out of it what you put into it. If you work hard, then it can completely change your mindset (if you are a new coder), and teach you plenty of skills. After AP CSP, I was able to land a summer internship working in CS at the San Diego Supercomputer Center. During this internship, I worked with huge supercomputers and began to understand what servers really were and how they worked. Our project was called ICICLE. If you want to learn more about it, you could watch this short video: https://www.youtube.com/watch?v=gNFk5tDTtoU. I developed sophisticated authentication methods, and did a lot of &quot;firsts&quot; in the project. I went from having to be guided through basic code in CSP to creating things that had never been done before. It&#39;s possible! After doing a lot of stuff behind the scenes, we got to test our system on massive knowledge graphs and run some machine learning algorithms. . Picture of one of the computers I worked with, called Expanse: . . Knowledge Graph of Asteroids, classified using a neural network on being hazarous or not: . . I also never gave up on making games! But now, I don&#39;t really need to follow tutorials anymore. I can architect a solution on my own, and when I do need to look something up I learn from it and implement it rather than just copying it. When something goes wrong, I&#39;m not stuck; I know what to do, and I have confidence because I know that every problem has a solution. Here&#39;s a peek at one of the games I&#39;m working on now: . . Anthony: After CSP . AP CSP helped immensely with my presentation and web development skills. For reference, here&#39;s a website I made for my 10th grade AP European History Final... . . As you can see, it looks like garbage! You can also check out my extremely great 11th grade website for AP CSA here. . After taking AP CSP, my websites looked a lot better. I updated a website for my golf coach and made some personal websites. Here&#39;s a quick one that I made to create basketball teams: . . Even if you&#39;re new to CS as a whole, knowing how to make websites can help you show off the things you&#39;ve done. Whether it&#39;s a personal portfolio website, an online shop, or anything else, web development is a great skill to have. . Final Thoughts . Anthony: I hope you have a great year in this class! If you put in the time and effort, you will be really successful and gain skills that you can use for the rest of your life. Best of luck to you all! . Sahil: .",
            "url": "https://nighthawkcoders.github.io/APCSP/collegeboard/anthony-and-sahil",
            "relUrl": "/collegeboard/anthony-and-sahil",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Introduction to Python",
            "content": "Introduction to Python - Week 1 . Introduction to Python sprint is a time to learn and obtain basic skills needed to Code a little bit. . Learning basics of Python | Learning how to Check setup work using Bash | Capturing notes and coding while building a Fastpages/GitHub pages and a yearlong individual notebook | Establish positive PBL habits: a focused mindset in the classroom, establishing work habits to achieve success. | . Daily Plans Week 1 . Discuss some concepts in Big Idea 3 Algorithms and Programming. Always Code/Code/Code in classroom when schedule allows! Practice Pair Programming Habit of 30 minutes/30 minutes/1 commit each and start of “Personal Computer Plan”. Here is a resource that can help you do a Python Overview, though use Jupyter Notebook and VSCode instead of the suggested IDLE. If you use this resource, try to create something that looks similar to their website; this will teach you how to design based off of what you see. . Monday: “Live Review” with pairs: show personal progress in setting up tools with Teacher. Doing checks with Bash Jupyter notebook. | Tuesday: Test Prep - Discuss Anatomy of Python. | Wednesday: Tech Talk - Fastpages, Jupyter Notebooks, Markdown : Tour of working on _posts and _notebooks. | Thursday: Tech Talk - Focus and Habits, video frm Yale. | Friday: Code/Code/Code - Pair Programming in Jupyter Notebook. | . Points and Tangibles . Points (see canvas), live reviews will be scheduled in class on Monday of next week. Everything will be crossover graded using a “Review Ticket” Individual/Pair _posts: “Personal Computer Plan” | _posts: “Focus and Habits” video from Yale | _notebooks: “Anatomy of Python” | _posts: “Review Ticket” | . | . | .",
            "url": "https://nighthawkcoders.github.io/APCSP/week/1",
            "relUrl": "/week/1",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Hello to Python",
            "content": "Hello, World! . These examples show the basic language structures and constructs of Python using print and input commands (aka anatomy). . Print command using Static Text which performs output . The classic introduction to a programming language is to output a &quot;Hello, World!&quot; message. In Python, this is a print statement. . The command or function is print() | &quot;Hello, World&quot; is a String literal. This is the referred to as Static text, as it does not change. | &quot;Hello, World&quot; is a parameter to the print command. | The print command outputs the parameter to the terminal, as you see it in this Jupyter document | Output in Jupyter Notebook is below the code cell. Output will vary depending on tools and development intentions. Python print typically outputs to a terminal, we will see that when students start using Visual Studio Code. | . print(&quot;Hello World!&quot;) . Dynamic example showing variables, input and output . This second example is a sequence of code, two or more lines forms a sequence. This example takes input from the user and stores the input into a variable called msg (short for message), then outputs the msg to terminal. - This example is Dynamic as the input and output can change each time the code is run. . A variable &quot;msg&quot; is part of both statement The variable &quot;msg&quot; is used to capture the input command | The variable &quot;msg&quot; is then used as a parameter to print command, causing input to be output to terminal, or in Jupyter Notebook below the code cell. | . | The &quot;input&quot; command activates the jupyter notebook input box, which obtains input from the user (try it!) the &quot;msg&quot; variable is the dynamic result of the input command | . | The print command outputs the &quot;msg&quot; variable captured in the input statement note, msg is a parameter to the print function | . | Input and Output in Jupyter Notebook Input is NOT in line with Output, this is a little annoyance and requires familiarity. Input and Output will vary depending on tools and development intentions. Python print typically obtains input and outputs to a terminal, students will see that when they run Python programs using Visual Studio Code. | . msg = input(&quot;Enter a greeting: &quot;) print(msg) . Building a Function . This example adds to the basics of the Python anatomy, a function. Input, output, and grouping commands in functions is the key to most programming languages. This example simulates a free response answer to a question. . The &quot;def question_and_answer(prompt)&quot; now contains multiple indented commands, the commands print and input were learned previously. | Grouping a sequence of commands, often used repeatedly, is called procedural abstraction. | Procedure, Function, def are all synonyms in the Python language. | The &quot;def&quot; is a key word in Python that defines a function. Using this keyword defines a group of commands, but does not run them initially. | The name of the function in this example is &quot;question_and_answer&quot;. In essence, we are defining our own command within the Python language. | The three &quot;question_and_answer&quot; commands that follow the function and indented commands allow this function to be run. | This code of the function is then run multiple times, each command line providing a unique &quot;prompt&quot; as a result of the literal parameter passed to the function. | The function takes a parameter called &quot;prompt&quot;, which is a message output to the user to describe the input requested. | String concatenation &quot;+&quot; prefixes the prompt with the literal message &quot;Question: &quot;. | The &quot;msg&quot; variable is captured as a result of the jupyter notebook input supplied by the user | The input &quot;msg&quot; is output back to the user with &quot;Answer: &quot; concatenated to the front. | . def question_and_answer(prompt): print(&quot;Question: &quot; + prompt) msg = input() print(&quot;Answer: &quot; + msg) question_and_answer(&quot;Name the Python output command mentioned in this lesson?&quot;) question_and_answer(&quot;If you see many lines of code in order, what would College Board call it?&quot;) question_and_answer(&quot;Describe a keyword used in Python to define a function?&quot;) . Imports, Selection, and Logical Expressions . In Python anatomy of you will be importing libraries and functions. This is code that is developed by others. In this example we are importing from a library called &quot;os&quot;, this library extracts properties from the operating system of your existing system. Additionally, this example uses the custom function defined earlier in the Jupyter document. Python and Jupyter docs requires you to reference imports and definitions above the referencing line of code. . import os, sys obtain functions and variables from running environment | print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable + &quot; on &quot; + sys.platform + &quot;!&quot;), is a concatenated statement that outputs properties from the import | . Next, this example defines a new function &quot;question_with_response&quot;, this function returns a value input by the user. This allows programmer to evaluate the response. The purpose of obtaining the return value is to evaluate if correct response was given to the question. . response from &quot;question_with_response&quot; is captured in a variable called &quot;rsp&quot; return command in function returns msg input by user | assignment to &quot;rsp&quot; is allowed a function is returning a value, names do not need to match (but could) | . | if command is next command in sequence after &quot;rsp&quot; assignment this command contains an expression, rsp == &quot;import&quot; which compare what is typed to the string literal answer | an if expression is evaluated for true or false | true takes branch of code directly under if | false takes branch of code directly under else command | . | . The grand finally of this example is calculating the right/total. . question = 3 is defined as number of questions | correct = 0 is defined as running score | correct += 1 is the way to add one to the score, this code is placed in sequence under correct expression evaluation | since question and correct are numbers, versus strings, to place them in concatenation in print statements you must inclose them in Python function str() which turns number into string. | final print statement is concatenated and formatted to give user and right over wrong | . import getpass, sys def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg questions = 3 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) question_and_answer(&quot;Are you ready to take a test?&quot;) rsp = question_with_response(&quot;What command is used to include other functions that were previously developed?&quot;) if rsp == &quot;import&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What command is used to evaluate correct or incorrect response in this example?&quot;) if rsp == &quot;if&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition?&quot;) if rsp == &quot;expression&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Hacks . Test running a Python file directly . From python directory run quiz.py in VS Code, this will show workflow of Input and Output in terminal | . Build your own Jupyter Notebook meeting these College Board and CTE competencies . Build your own quiz, including my questions and show outputs | Create both Markdown for description and Code for execution | Structure your Python code with comments &quot;#&quot; to complement Markdown descriptions | . Additional requirements . Build your quiz so that it captures the key Vocabulary from this Jupyter document | Calculate the percentage of your quiz | Review College Board Big Idea outline, see if you can reference locations in Markdown that support vocabulary | . Extra credit, Advanced . Do you see repeating pattern of code? Try to implement solution to avoid the repeating pattern (hint: list and iteration) | .",
            "url": "https://nighthawkcoders.github.io/APCSP/collegeboard/python",
            "relUrl": "/collegeboard/python",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "VSCode Download with WSL",
            "content": "Instructions to Download Visual Studio Code Remote - WSL . Windows is the number one desktop operating system. However, Linux is a preferred standard for many developers. Using WSL you can develop in a Linux-based environment, use Linux-specific tool chains and utilities, and run and debug your Linux-based applications all from the comfort of Windows. This gives the developer on Windows the best of both worlds. . Download WSL . This section of the document is intended to get the WSL distribution of Ubuntu installed on you Windows PC. . Open a PowerShell. Enter WSL installation command at Prompt: wsl --install . | If you receive error the required operation requires elevation You will need to perform wsl install command again, but 1st elevate permissions using command: start-process PowerShell -verb runas | As it states in output in shell, you will need to reboot your computer. My suggestion is to select Restart or if available Update and Restart. | After booting up there are several things that could occur A Command or PowerShell prompt could automatically pop up prompting you for a username. Choose a username and password to create an account. | Some other event may occur. Make sure you establish password when requested. Verifying or take action in Command or Powershell, try these as C: Users &lt;username&gt;… | . Type wsl --list, you should see Ubuntu | If no Ubuntu, Type wsl --list --online, then use wsl --install -d Ubuntu | After success | . | After WSL install, verify the following before you continue: Open Command or Powershell, Run as your own user account. | . Type wsl, this should put you in a different looking prompt. From C: Users &lt;username&gt; to &lt;username&gt;@MSI: | If you ever need to elevate permission for installation sudo wsl, followed by your computer password. - Observe that drive changes from C: to /mnt/c when you change prompt from native Windows to WSL. | . | Download Visual Studio Code . Installing Visual Studio Code (VSCode) with the Remote extension lets you use the WSL as your full-time development environment right from VS Code . Install VSCode, Download VSCode Windows Version | When prompted to Select Additional Tasks during installation, be sure to check the Add to PATH option so you can easily open a folder in WSL using the VSCode code command. | Install the Remote Development extension pack | Opening up VSCode with WSL . Open a WSL terminal window (using the start menu item or by typing wsl from a command prompt / PowerShell) | Navigate to a folder you’d like to open in VS Code Here are some useful commands for our work cd ~ # takes you to your personal directory on Windows mkdir vscode # creates a folder to clone your repositories ls # views the content of the directory you are currently on cd ~/vscode # changes the directory to path for vscode files git clone https://github.com/nighthawkcoders/APCSP.git # clone repo cd APCSP # changes the directory to path for APCSP repos assets code . # opens APCSP in VSCode cd .. # changes the directory to the previous/parent directory git config --global user.email mygmail@gmail.com # tell git your email git config --global user.name mygithub # tell git your github id . | Type code . in the terminal. When doing this for the first time, you should see VS Code fetching components needed to run in WSL. This should only take a short while, and is only needed once. | Opening up VSCode with WSL terminal . Here is sample of steps with WSL equal to shay These steps will need to be adapted to your environment. . These two commands help git to understand your identity shay@MSI:/mnt/c/Users/ShayM$ git config --global user.email shay@gmail.com shay@MSI:/mnt/c/Users/ShayM$ git config --global user.name shay . | These commands clone a repository and load VSCode for work shay@MSI:/mnt/c/Users/ShayM$ mkdir vscode shay@MSI:/mnt/c/Users/ShayM$ cd vscode shay@MSI:/mnt/c/Users/ShayM/vscode$ git clone https://github.com/nighthawkcoders/APCSP.git Cloning into &#39;APCSP&#39;... remote: Enumerating objects: 8306, done. remote: Counting objects: 100% (2360/2360), done. remote: Compressing objects: 100% (723/723), done. remote: Total 8306 (delta 1312), reused 2305 (delta 1262), pack-reused 5946 Receiving objects: 100% (8306/8306), 16.27 MiB | 1.11 MiB/s, done. Resolving deltas: 100% (4360/4360), done. shay@MSI:/mnt/c/Users/ShayM/vscode$ cd APCSP shay@MSI:/mnt/c/Users/ShayM/vscode/APCSP$ code . Installing VS Code Server for x64 (6d9b74a70ca9c7733b29f0456fd8195364076dda) Downloading: 100% Unpacking: 100% Unpacked 2416 files and folders to /home/shay/.vscode-server/bin/6d9b74a70ca9c7733b29f0456fd8195364076dda. shay@MSI:/mnt/c/Users/ShayM/vscode$ . | . Setup Observation . VSCode with WSL shows a WSL indicator in the bottom left corner of Window. . Resource . Read more on WSL and VSCode VSCode doc .",
            "url": "https://nighthawkcoders.github.io/APCSP/techtalk/vscode-wsl",
            "relUrl": "/techtalk/vscode-wsl",
            "date": " • Aug 15, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Tools and Equipment",
            "content": "Tools and Equipment make Development Easy . Learning Development tools, working with Projects, is the key to a rapid entry into Code/Code/Coding. A Computer, Git, and an Code Editor are the starting points for coding. Add Jupyter Notebooks (computational documents) and you bridge Computer with Data Science. The beauty of Jupyter is that it creates a computational narrative, a document that allows code and data with visual analysis, hypothesis, and conjecture. . Computers using either MacOS, Windows, or Linux are requirements for the course. | GitHub, is Git hosted in the Cloud. It is the defacto hosting platform for version control and collaboration. It lets you and others work together on projects from anywhere in the world. Think of it as the Google Docs for Coders. Version Control is the task of keeping a software system of many versions and configurations well organized. | Version Control History of files and changes in Version Control System (ie GitHub) is very important! Ultimately, any Coder will break things or delete things! Looking at older versions and configurations at a microscopic detail is sometimes the only way to unwind bugs. | . | Visual Studio Code (abbreviations VS Code, VSCode or VSC) is a powerful Code Editor. VSCode performs a lot of magic and automation behind the scenes to make your Code/Code/Coding life easier. There is a back-in-the-day story hear, but short version is VSCode qualifies, IMO, to be called and Integrated Development Environment (IDE). It allows you to Edit files, Build your Code, and Pull/Push Code from and to the GitHub. FYI, VSCode is new to APCS this year, the former IDE’s used in CompSci classes include XCode, Eclipse, and IntelliJ. | Jupyter Documents (.ipynb) is a document format for creating and sharing computational documents. These documents allow you to compute segments of Python or Java code as you are taking notes. These are new to AP CS this year, but are viewed as very powerful in gaining a quick understanding of coding concepts. Jupyter documents are often called “notebooks”. | . Equipment, accounts and tools . A laptop, bring a laptop to class every day with the Development Tools installed on it. Computers issued by the School, ie Chromebook, are not effective because of the restrictions placed on adding software by PUSD. If you have any problems obtaining a Computer where you can install software!, please attend Office Hours immediately | GitHub Account, VSCode will be used to clone/push/pull changes. GitHub is where we store and share code in the cloud, think of Google Docs but for Code. | GitHub Pages will be used to host your personal web site, notes, and experiences. Review GitHub concepts 2-min https://www.youtube.com/watch?v=phGdqJB6ep0 | Jupyter Documents will be used in conjunction with GitHub Pages to build running Java Code in to your Technical Notes. Review Jupyter basics 6-min https://www.youtube.com/watch?v=3jZYC9rGrNg | Slack Account, install App on Laptop, get used to reading announcements. Slack is a messaging tool similar to Discord, the first year we had 35,000 message in a class. | Python is the key language you will be using in this class. Flask, Jinja2, HTML, CSS, JavaScript are the key supporting technicals you will be using to enhance your learning of coding. | VSCode is the code editor we will be using in this class. VSCode is more than and editor, it is called and Interactive Development Environment (IDE). | Anaconda is the environment manager. Conda is an open-source package and environment management system that runs on Windows, macOS, and Linux. | Homebrew for MacOS installs packages (Java, Python) you need for Development that Apple did not include. | Apt for WSL Ubuntu installs the packages (Java, Python) you need for Development that Ubuntu did not include. | AWS Account for cloud computing and deployment, account access will be provided by Teacher. AWS Cloud Computing and Electric Cloud Computing (EC2’s) will be used to Deploy and Support projects on the Internet. | . GitHub Account . Follow instruction https://docs.github.com/en/get-started/signing-up-for-github/signing-up-for-a-new-github-account Use your own personal/permanent email… NOT SCHOOL!!! GitHub belong to you. | . MacOS 1st Time Developer . Python2 install on MacOS . Install Python2 | . VSCode install on MacOS. . Install VSCode | . Anaconda install on MacOS. . Download for MacOS: Anaconda | Run Install: Answer yes to questions | . Homebrew install on MacOS . Copy and Paste to Install from Terminal Homebrew Copy bash ... curl ... command using copy box on website | Launch terminal from search bar | Paste bash ... curl ... command into Terminal … | Make sure command starts, this should provide feedback/output in terminal and could take a long time, like 10-min, there could be a prompt in the middle, at about 5-minutes. Follow any on screen instructions provided in terminal output to finish. | . | Homebrew installs a tool called “brew” which helps add and manage developer packages on MacOS. | . At this point, the next task is to prepare for Jupyter Notebooks and Kernels. You must start a new Terminal. Now the Terminal prompt should be prefixed with (base). If not, you need to go back to Anaconda install. . Open new Terminal. If your prompt is not looking like this you need to back up. (base) iMac:~ jmort1021$ . | . Key Packages needed on MacOS . Close and Start a new terminal, run each command in Terminal $ brew list # list packages $ brew update # update package list $ brew upgrade # upgrade packages $ brew install git # install latest git $ brew install python # install python3 for development $ python --version # version of python3 installed $ brew install java # openjdk install . | . Windows 1st Time Developer . VSCode install using WSL. Windows users have option to have best of Windows and Linux while developing within VSCode. . Install VSCode using WSL. | Required review, become familiar with Windows WSL development | . Anaconda install on WSL. . Try the exact commands in WSL Command / Powershell. | Only if there is a wget error… To find the latest Linux-x86 distribution scroll to the bottom of this page: https://www.anaconda.com/products/distribution. Change wget and Anaconda3 command based on new link. PS C: Users UserName&gt; wsl # Windows prompt to WSL command $ cd /tmp $ wget https://repo.anaconda.com/archive/Anaconda3-2022.05-Linux-x86_64.sh $ chmod +x Anaconda3-2022.05-Linux-x86_64.sh # Answer yes to all the prompts $ ./Anaconda3-2022.05-Linux-x86_64.sh . | . At this point, the next task is to prepare for Packages, Jupyter Notebooks, and Kernels. You must start a new WSL Command / Powershell. Now the WSL prompt should be prefixed with (base) from Anaconda install. If not, you need to go back to Anaconda install. . Open Command / Powershell. If you are not looking like this you need to back up. PS C: Users ShayM&gt; wsl # Windows prompt (base) shay@MSI:/mnt/c/Users/ShayM$ cd ~ # WSL prompt (base) shay@MSI:~$ # WSL home, best place to install files . | . Key Packages needing update on WSL Ubuntu . In a WSL Command / Powershell install Python3 $ sudo apt list # list packages $ sudo apt update # update package list $ sudo apt upgrade # upgrade packages $ sudo apt install python2 # install python2 for package dependencies $ sudo apt install python3 python3-pip # install python3 and pip3 for development $ python --version # version of python3 should be shown $ sudo apt install default-jdk default-jre # java install $ java --version # java runtime version $ javac --version # java compiler version $ sudo apt install unzip # unzip utility . | . Jupyter Install and Kernels (MacOs and WSL) . Install Jupyter and check kernels . (base) id:~$ conda --version (base) id:~$ conda install jupyter # install jupyter (base) id:~$ jupyter kernelspec list # list installed kernels Available kernels: python3 /home/shay/.local/share/jupyter/kernels/python3 . Install Bash kernel. . (base) id:~$ # start in home directory (base) id:~$ pip install bash_kernel # download bash kernel Collecting bash_kernel Downloading bash_kernel-0.7.2-py2.py3-none-any.whl (15 kB) Requirement already satisfied: pexpect&gt;=4.0 in ./anaconda3/lib/python3.9/site-packages (from bash_kernel) (4.8.0) Requirement already satisfied: ptyprocess&gt;=0.5 in ./anaconda3/lib/python3.9/site-packages (from pexpect&gt;=4.0-&gt;bash_kernel) (0.7.0) Installing collected packages: bash-kernel Successfully installed bash-kernel-0.7.2 (base) id:~$ python -m bash_kernel.install # install kernel Installing IPython kernel spec (base) id:~$ jupyter kernelspec list # list kernels Available kernels: bash /home/shay/.local/share/jupyter/kernels/bash python3 /home/shay/.local/share/jupyter/kernels/python3 . Install JavaScript kernel. Output not shown, answer y or yes to questions. . (base) id:~$ conda install nodejs # node is framework for JavaScript kernel (base) id:~$ npm -version # node package manager comes with nodejs (base) id:~$ npm install -g ijavascript # get the kernel (base) id:~$ ijsinstall # install javascript kernel (base) id:~$ jupyter kernelspec list # list kernels Available kernels: bash /home/shay/.local/share/jupyter/kernels/bash javascript /home/shay/.local/share/jupyter/kernels/javascript python3 /home/shay/.local/share/jupyter/kernels/python3 . VSCode Fastpages Project . Start Pages/Fastpages from GitHub Setup Instructions . Recommended Video - 27 minutes | Verify GitHub pages is running | Clone and Open project in VSCode (base) id:~$ mkdir -p vscode # make a vscode directory (base) id:~$ cd vscode # change to the directory (base) id:~$ git clone https://github.com/nighthawkcoders/APCSP.git # change to your repo (base) id:~$ code . # open VSCode projects in directory . | Push a minor “markdown” change and Verify on GitHub https://code.visualstudio.com/docs/editor/versioncontrol#_git-support | Verify “markdown” change on GitHub Pages | Create a new Jupyter notebook and publish to _notebooks directory https://code.visualstudio.com/docs/datascience/jupyter-notebooks VSCode Marketplace and Extensions . | . . Visual Studio Code claims to provide just the tools a developer needs for a quick code-build-debug and version control cycle. It provides a Market Place for enhancements and more complex workflows. Before adding extensions, clone projects and see what is requested or added. Here are some extension that were added through that process or that I have added... . In marketplace there are several extensions for Python, Python Intellisense, Python Extension Pack | Jupyter: This supports build jupyter ipynb files from within VS Code | Code Spell Checker: Got to have it when building documents, particularly if you spell and typo like the Teacher | IntelliCode: Got to have it when creating a code file, it will sense type of code by extension. Also, it help with syntax as you are coding. | . Review Details in Marketplace for better explanation of purpose of the things explained above. There is a lot more! As you need Git help look at things like Git History and GitLens. Or, perhaps you enjoy Vim and want Vim emulation for editing, their is an extension for that. Later, there may be interest in AWS Toolkit or Deploy extensions. We will learn more about Marketplace Extensions as we do more. . . VSCode for Python Extensions . VS Code https://code.visualstudio.com/docs/languages/python Install Python, Python Environment Manager, Python Extension Pack, Pylance | Install Jupyter, Jupyter Keymap | Install IntelliCode, IntelliCode API Usage Examples | Windows machines install WSL Remote Development | . | . Hacks . Students need to demonstrate all these tools running to Scrum Team and then the Teacher. Problems need to be worked out quickly. Before asking Teacher ask 3 other students. Do not delay in Tool Setup task, there will be no late makeup for points!!! Tool and Equipment setup is like attendance, without Tools and Equipment you are effectually absent. . Provide a comment on this page to show Tool success | Hint. Make a simple comment “Working on it”. This can be edited by clicking on Time Stamp of post; at this point you will see triple dots (…); clicking dots provides an Edit option; clicking Edit takes you to a friendly “Markdown editor”. Enjoy this editor, my suggestion is build your entire message in thi editor and/or build personal message in Fastpages / GitHub pages “_post” and share the following. Share link to personal Fastpages / GitHub pages running on github.io. My suggestion is to change index.html to show it is really yours. | Share link to a new page (_posts) in your Fastpages project show use of Markdown and/or HTML fragments. You will need to learn special date requirements of a file as well as a little Markdown or HTML. | Share link to your 1st Jupyter notebook (_notebooks) showing usage of Python: print (“Hello”) | Capture image/screen capture of Fastpages project showing use of an Integrated Development Environment (VS Studio) | Share link showing your GitHub insights. This is your personal activity of commit history. | . | .",
            "url": "https://nighthawkcoders.github.io/APCSP/techtalk/tools",
            "relUrl": "/techtalk/tools",
            "date": " • Aug 15, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "Tool Setup Sprint and Pair Programming",
            "content": "AP CSA COURSE OUTLINE . Methodology. Project Based Learning (PBL) | AP Classroom. The 10 Units of AP Computer Science A | Code.org curriculum challenges | . | Key Principles Leaning to Code Mini Labs on PBL, AP, and Code.org challenges | Programming, Algorithms, Databases, and APIs | Team and Individual Project will highlight all 5 Big Units, either academically or in interest fashion | . | Succeed on Exam Work with AP MCQs and Create Performance Task | Work with Code.org segments to complement Test Prep | Student led Paper FRQs and MCQ analysis exercises | . | Preparing for Internships, “Real World” Follow practices to becoming a software engineer | Collaboratively Build, Deploy and Host Web Pages | Establish “Real World” Scrum Team projectsPreference with Customer/Sponsor | Follow Agile methodology using GitHub, Issues and Projects tools | . | Become a Blogger Build individual GitHub Pages Web Site to _post Notes and Learnings | Learn to publish and share what you have learned | . | . | . “Real World” Projects . You, your pair, and your Scrum Team will collaboratively Build, deploy and host Web Site. This Web project contains Technicals learned throughout the Trimester. This will be done in increments. Each Monday an assignment will be given and the next week it will be under Live Review. . Feature Considerations for Project Project Requirements A fun zone, unique idea(s) | Educational zones that capture every key learning objective | A location that highlights individuals, jobs, and technical capabilities (About Us) | . | Project Technicals Managing PBL Requirement for Project (Issues, Scrum Board) | Use of “Python Functions and Classes” in backend. | Use of “JavaScript” or “Jinja2” in frontend | Data Structure exchange between frontend and backend “SQL” or “MongoDB” | . | . | Individual GitHub Pages considerations for Big Ideas 1 - 5 Each week we will be studying Big Ideas in Collage Board Test Prep and PBL Tech Talks | GH Pages should be used like notes to capture PBL, Python, JavaScript key learnings each week! | BTW, using GH Pages will make you Code and Blog at the same time. Jupyter Notebooks using Python and Markdown will enable running code in notes, the Teachers like running code! Jupyter Notebooks can also do JavaScript, Bash and other languages. | . | . Establish PBL and Comp Sci attitude . Watch a video How I Would Learn To Code . Attitude. An Agile mindset is not knowing the answer, making lots of mistakes and performing iteration. A successful grade is dependent on making mistakes, research, asking questions, and iteration. | Suggestion. Please bring a personal laptop to class daily. The Internet and AP Classroom web site will be considered a text book. | Requirements. Everything will be distributed electronically. All code you develop will be delivered to the Cloud. No paper! | Grading guidelines. There will be key technical objectives which will require producing tangibles. Essentially, it is impossible to be late with work if you work consistently attend class, work in class and turn in progressive tangibles each week. Thus, failure to have work will result in a 10% deduction. Additionally, late work must be defended in office hours. High “A” is very tough to achieve, something beyond the given tangible requirements. Something that exhibits an unforced desire to learn and Code/Code/Code. | Low “A” is consistency in producing tangibles toward Team Project and Individual GH Page according to Issues and Scrum Board plans. Plans must be consistent with key objectives and technicals. | “B” is having flaws in consistency or tangible shortcomings, but mostly on track. A flaw would be mostly working code, attempts, but incomplete. | “C” is a lack consistent effort, lacking tangibles. Lack of producing working Code. | Below “C” is composed of Slash/Slash/Slash offenses. Lack of attendance, disruptive behaviors, doing work from other classes during CompSci class time, paper visible in class, and turning in tangibles that you can’t represent in live review. | Zero is a result of plagiarism. The Teachers will likely miss first offense of plagiarism, thus any offense will result in an inquiry on previous work. Remember this is an effort based class. | . | . Assignments and Work . Assignments mostly Due either Friday or Monday at the start of class (canvas is official record for point guidelines and synergy for points received) Live Grading, all grading is complemented by Self/Crossover assessments. Teachers are passionate about quality crossover reviews. This a big part of your personal learning. Taking a review lightly is taking your grade lightly, as poor review will cause a reduction in your own points. | Always prepare Review Ticket (GH Issue) using canvas assignment as a guide | . | Trimester starts with 5 point seed (highly engaged +, extra activities +, distracted -) | There will be about 50 points per trimester, we will save a big chunk of points for the last few weeks of Trimester. Don’t get comfortable, keep working your CompSci muscles. | . PBL Sprint 0 / Week 0 . Learning outcome. Getting adapted to the Agile mindset used in Computer Science. Additionally, getting introduced to GitHub and showing usage of VSCode. Building a personal and running Fastpages/GitHub Pages. . Wednesday - “Introduction Sprint”. Pick pair share partner, Pick crossover pair, Establish team of four. Based off of modulo mathematics (remainder) there can only be 3 teams of 5 maximum. Spend some time talking and getting to know each other. Consider key roles in Project Teams as Scrum Master (Issues, Scrum Board), DevOps (GitHub, Deploy, .gitignore, requirements.txt), Frontend Developer (HTML, Jinja2, Javascript), Backend Developer (Flask, Python) | Thursday - Review “Tools and Equipment”. Bringing your laptop. Setup Fastpages and Tools and push code to your Repo and track updates of Fastpages to deployment. | Friday - Start with Pair Share coding. Spend 25 minutes at keyboard finishing installation and performing fastpages coding, while Pair Share observes and consults. Next 25 minutes Pairs reverse roles. | . Equipment, accounts and tools . A laptop, that you bring to class every day with the Development Tools installed on it. | GitHub Account, VSCode will be used to push/pull changes. GitHub is where we store and share code in the cloud, think of Google Docs but for Code. | GitHub Pages will be used to host your personal web site, notes, and experiences. Building pages will teach Markdown, HTML Fragments, and JavaScript. | Jupyter Notebooks will be used in conjunction with GitHub Pages to build running Python Code in your Technical Notes. | Slack Account, install App on Laptop, get used to reading announcements. Slack is the tool will use for messaging, we have been averaging 50K messages per year. | Python is the key language you will be using in this class. Flask, Jinja2, HTML, CSS, JavaScript are the key supporting technicals you will be using to enhance your learning. | VSCode is the code editor we will be using in this class. VSCode is more than and editor, this type of tool is often called an Interactive Development Environment (IDE). | AWS is used for deployment, an AWS account will be provided by Teacher. AWS Cloud Computing and Servers will be used to Deploy and Support projects on the internet. | .",
            "url": "https://nighthawkcoders.github.io/APCSP/week/0",
            "relUrl": "/week/0",
            "date": " • Aug 15, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "College Board Pseudo Code",
            "content": "Learning College Board Pseudo Code . Thousands of different programming languages have been created, and more are being created every year. College Board has designed a pseudo code, non operational programming language, to highlight concepts that it wants every student to learn. College Board pseudo code highlights instructions that are common for many languages. . BTW, instructions are translated into machine code for computers to execute. The notation we look at is supposed to be easy for the user and their application. For instance, many new languages are being popularized around data science. It is more important that a Data Scientist is successful in their task, than to learn syntax that is not familiar to their traditional workspace. . College Board is trying to remain neutral and build Computer Science Principles off of any language, thus the Teacher is left to pick the language(s) according to application and curriculum. . Exam Reference Sheet . Comparison of CB Pseudo Code to Python with descriptions . Command Vocabulary | Pseudo code | Python | Purpose | . Output | DISPLAY(expression) | print(expression, end=” “) | Displays the value of expression, followed by a space. Python defaults to newline, thus the end=” “ | . Input | a ← INPUT() | a = input(prompt) | Accepts a value from the user and returns it to the variable a. | . Assignment | a ← expression | a = expression | Evaluates expression and assigns the result to the variable a. | . Selection | IF (expression) | if expression: | Run commands in the code block associated with the selection | . Iteration n times | REPEAT n TIMES | for i in range(n): | Repeat commands in the code block associated withe the iteration n times | . Iteration expression | REPEAT UNTIL (expression) | while expression: | Repeat commands in the code block associated withe the iteration while expression is true | . List Assignment | list ← [expression1, expression2, expression3] | list = [expression1, expression2, expression3] | Assigns 3 values to list, value can be literal or expressions | . First index in List | list[1] | list[0] | Access the 1st element in the list[]. FYI, most programming languages start a zero. | . Last index in List | list[LENGTH(list)] | list[len(list) - 1] | Access the last element in the list[]. If you start at zero, last element is length - 1. | . Define Procedure | PROCEDURE name (parameter) | def name(parameter): | Create a procedure containing a sequence of programming instructions. | . Expression equals | a = b | a == b | Evaluate if assigned value of a equals assigned value of b | . Expression not equals | a ≠ b | a != b | Evaluate if assigned value of a is NOT equal to assigned value of b | . Pseudo IF Code Block using curly braces . a ← 1 b ← 1 IF (a = b) { DISPLAY(&quot;A equals B&quot;) } . Python IF Code Block using indent . a = 1 b = 1 if (a == b): # Python uses indent to establish code block, Teacher use tab key print(&quot;A equals B&quot;) . Suggestions for students . It is very important that you become fluent in “Command Vocabulary” and “Purpose” of the Pseudo Code versus Python comparison. During the year you will look at JavaScript which has same Command Vocabulary and Purpose. Others may take Java, you will see the same ideas again. . Start building Vocabulary and Purpose by Code/Code/Coding | Supplement you Code with comments and outputs using Markdown and Jupyter notebooks. This style allows you to code explore and learn as you go. | Use CB pseudo code as part of your definitions as you build your notebooks. | . Hacks . Build your own Notebook to highlight what you want to capture on pseudo code | Add a link in your Notebook to College Board pseudo code reference and other materials you find interesting by searching the internet | .",
            "url": "https://nighthawkcoders.github.io/APCSP/collegeboard/pseudo_code",
            "relUrl": "/collegeboard/pseudo_code",
            "date": " • Aug 15, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Student Scoring on AP Exam",
            "content": "History of CSA AP Exams . 2022 . Paper exam in Gym, MCQs . Energy in classroom was much improved over prior year. Ms Naidu and Mr Mortensen often had positive work sessions at the end of the day and we were always complementary to students effort. | Test Prep Tuesday was polarized between participating and not participating. Student Led sessions needed improve, perhaps more training by Teachers. In 2023 testing year, the plan is to lead Test Prep sessions at start of the year and look for students to provide valued participation in second half of Trimester 1. Extra Credit will likely be awarded for quality student led preparations during the year. | Students did very well on practice exams and on corrections of errors. Majority of class was in dark green after 2nd practice test. | Some students were trying to do minimum on College Board Create Performance Task (CPT). The people that received “4’s and 5’s” seem to have an extra mindset on CPT. It is my opinion that many scores dropped out of “5” range as a result of the CPT. But, this can’t be confirmed, but theory is based on high MCQ scores in practice sessions. | . . . 2021 . Pandemic and online exam in lock down browser, MCQs . Scrum Teams were standardized at 4 to 5 people, based on CSA experience. Connections in Scrum Teams were inconsistent throughout the year, a lot of black screens. | A few students took on Student Led Test Prep Tuesday and produced prepared lessons. | A few students seem to do most of the work in Scrum Teams. There were many mentions of this in teams that were more open to their internal problems. | Based off of inconsistent participation, scores did not surprise the Teacher. | Stats show there is no left in this graph, very successful class. | . . .",
            "url": "https://nighthawkcoders.github.io/APCSP/collegeboard/history",
            "relUrl": "/collegeboard/history",
            "date": " • Aug 15, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "USC Code.org Workshop Notes",
            "content": "Computer Science Principles Code.org . Monday Morning Session 9 - 11 am . . Code.org is sponsor. Lesson are from published Curriculum Guide. . Introduction is on equity. 50% girls in school should mean 50% enrollment in CSP | Follow up dates. Saturdays 10/15, 11/19, 1/28, 3/18 | Met Ken Toma (Canyon Hills, SD), Faith Yeaton (San Gabriel Academy, Pasadena area), Ms O&#39;Masters (Central Valley) | Worked with Sean Yeung who is new to my school :). I would like to see a lot of him this week. | Lesson 3 Plan What are 3 things you notice about the lesson plan? Circle and square patterns is a lite intro into binary. Number 7 and permutations of squares and circles are showing representations, which are leading to 1&#39;s and 0&#39;s that students will see in future. Group work is used, as one Teacher said in our session... &quot;to make sure the work gets done&quot;. | What are 2 things you have questions about? I believe 15-18 age group should be able to combine this with binary lesson in same amount of class time listed for this lesson plan (45 minutes). Elaboration on this would seem like a fall back for me for the few in my school that don&#39;t get binary directly. IMO, binary should be taught in detail when needed, my plan is to teach it through color codes and through binary calculator; the later inspired by Harvard CS50. IMO, in modern languages and frameworks we don&#39;t want to lead students down the binary grind until they get interested in CS or binary as part of an application solution. College Board seems to have delayed this to Big Idea 2 and teaches concepts around data abstraction and data compression. | What is 1 thing you are interested to find more about or are excited about when you look at this lesson? Since we are starting in a lesson, I would like to see 12 weeks or course vision. I feel like this is a very isolated and simple topic. Though, it is an easy thing for Teachers to get to know each other. Perhaps, for our event it is more about Collaboration from Big Idea 1 then Binary in Big Idea 2. | . | . . Monday Afternoon Session 1 - 3 pm . Binary Number System slide #99. The activity requires paper and Teacher thinks analog experience is important. Connect Circle-0 / Square-1. Teacher recognizes different experience level but thinks everyone should create flippy-do. Code.org vocabulary is last, but not to be ignored. . Relation is focussed on these concepts 0-9 are symbols for numbers in Base 10 | 0-1 are symbols for numbers in Base 2 | . | Make an adaptation to support Flippy-Do information: Binary Calculator | The 2048 game might be interesting development activity to relate to binary. | This is a general slide on all lessons slide #121. | Color Codes inserted into these lessons seems key to me, or some other purposeful element, encryption was mentioned by Teacher. In general, not seeing “why?” in Code.org lessons as we start… but the appear in the high level description. | . Compare Unplugged and Plugged Lessons. . What is teacher doing in unplugged lesson? encouragement, walking around, answering questions. Unplugged is not computer: Stand-up meeting, White Board Design | Let them Explore!!! Shared an idea of plugged lesson, shared a tool. Don’t lecture about it, as them what it does, what is happening? | . Teachers role is described as Lead learner. We may not know, but we can figure it out. My response to questions… . Lead learner allows diverse activities in classroom | Lead learner may provide completely different work for student with special interests or special needs. | Teacher (Jennifer) suggested she needs to build the computer science muscle, including suffer confusion. Student (Patrick) mentioned that students see straight into your capability. | Different rhythms for different students. | Blogging Platforms mentioned | Peer Feedback mentioned | Pair Programming mentioned | . Actions for inclusive classroom culture . Group thought it is more on capability versus culture | Student (Sonya) talked about doing multiple media types (paper, digital) | Student (Patrick) discussed audio and video slides for virtual | Student (Ken Toma) give everybody a voice. Suggested pair-share can provide that platform | . Async work . This video discusses a lot of what I believe in and will kickoff PBL well. I think it popped up by accident but it was cool https://www.youtube.com/watch?v=9s29LKfEFjQ | Watched the place, mostly it has a place to complete async activities and surveys. It says I am not enrolled when I attempt survey. | The Place introduced. | . Tuesday Morning Session 9 - 11 am . Module 2 Intro Slides . USC represented shared Web Site | Unit 1 Lesson 7. Played with B/W Widget, on building black and white images. Idea was good on 1st couple of exercises, it quickly seemed to become tedious. I am not sure how it would related to key concepts in CB and not happy with it in PBL (except if we add improvement or design elements). Interaction could be improved to maintain orientation of Hexadecimal to lines. Maybe coding improvement could be to preserve orientation and allow clicking on pic, binary, or both. This exercise in driver navigator would make a lot of sense. Worked with Jp Fletcher, Jason Mahoney, Manuel Hernandez | Unit 1 Lesson 8. Color Images Widget, I like this for the 1st lesson more. It seems like the stair step is not significant and perhaps this might provide more joy. Somewhat a combination of two lessons would make me happier, perhaps one black/white and then color would be good for interactive lecture. Using page: https://studio.code.org/s/csp1-2022/lessons/8/levels/2 04 02 18 FF0000 00FF00 0000FF 000000 FFFF00 FF00FF 00FFFF FFFFFF . | Course Framework page 16, computation thinking practices and big ideas. Learning objectives and essential knowledge. | Async was on Big Ideas, Computational Thinking practices,… In my experience I focus in on covering the Big Ideas. Students don’t seem to relate will to other weightings. Also, I focus on CTE principle of College Ready through test and Intern ready through PBL. If we teach them to build stuff a lot of the other things fall out. | . Tuesday Afternoon Session 1 - 3 pm . Kickoff was reviewing scavenger hunt. People generally have questions as new teachers. . Teacher (Katie) reviewed CB outline. My experience is by doing CB MCQs and PBL, the students think questions are easy/basic. | Next (Katie) covered the Code.org outline. Unit 1-3 cover Big Idea topics in 1, 2, 4. Units 4-7 cover Big Idea 3. | Some discussion on block coding vs scripted in Create Task Project. | . Transition to Unit 1 Lesson 9-10 Lossless/Lossy Compression. Widget Bubble 1 . Played with Text to Symbol compression, Ken Toma came up with multiple words. | Spoke on introduction, we instructed Patrick to look for associations to make this interesting. | Lossy compression had a reduction widget | Lossy compression had a pick quality slide voting | Summary on these, widgets and ideas are great for intro, but they don’t seem to have depth that I like in the lesson. I want people to learn how to do these. | . Async session had a video that shared review of things we missed in workshop versus code.org curriculum. This filled some gaps that I thought were missing in order that we followed. . How you interact with the World. | For tomorrow, there is talk of Internet Simulator / Messaging System that may be good illustration and complement to a Tech Talk. I wonder, do they provide code for these tools? That would be a great thing to teach students to make, it looks like it works over sockets because of instant refresh. | . Wednesday Morning Session 9 - 11 am . Internet Unit A new day of slides . Paseo Reflection . Strongly: identify Coach, Parent | Life Advantage: Being Chinese, Entrepreneur | Equity: Teacher, Coach/Teaching | Feel, Identity: Balance on sharing (ego heavy, selling short). Mental health and physical health are important on reflection, feeling selfish. Give people benefit in process of their evaluation. | . Network Challenge. This is the challenge that was familiar to classroom and Colin made this as an app a couple of years ago. . Two people share a line | Multiple connections from persons to lines | Teachers are holding a lot of stock in simplicity and activity. Though, Network are multiply connected to routers and not computers and Network design is complex. It should be clarified that most home computers have a single router. A,B,C,D,E should be conceptual. ISP typically have multiple paths and home networks do not. It is interesting that Group 4 used a hub, challenge #3; this tells me that people are going to think it is computers. | . IP Addresses and DNS. Started by making a series of appointments. Not much purpose of this other than addressing names and getting a response. Creating a packet of data (Monday, Cheanie) response (OK). . Async work . Mental pictures Blind spots, accept you have them and work on them. Female: delicate, caring family | Male: career, strong, powerful | . | Article summary is holding ourself accountable for bias, as I am sure I have some bias that is reflected in my work. However, I believe most of my personal bias has to do with classroom behavior of the individual. Other notes: sometimes students are looking for bias | Difficulty: those that have history (good or bad) in a year long classroom have difficult going good to bad or bad to good in my eyes. Certainly someone who starts great gets a lot of my respect and favoritism. | . | Digital information dilemmas, game companies can’t use Lebron James tattoos. There is so much copyright, I am not even sure I can take notes and represent pictures, but I do it. | . Wednesday Afternoon Session 1 - 3 pm . Network Simulator and Bias . Network Simulator would be really fun if code was available. I think I would like to mimic it for a development project. Students really resonate toward building this type of thing. It could be built on top of Logging and Image thing. | Bias discussion and my problems exists or are established on behavior. I have favorite students and even invite them into Nighthawk Coding Society. Or they invite themselves. | Student attitude may have something that needs exploration. | . Async work is mostly a couple of videos and ability to comment on the material. These are particularly good ideas and are somewhat built into GitHub pages. . We should have students comment on most of the lessons or the day after the lessons. This could be a great way to obtains some feedback in context. | Network simulator may be a tool that we could build in class, it would be an interesting project for a team that wants to code. | . After hours work. Because of discussion of awarding people on doing things conversation, plus many asking questions about how to score on doing things… I went back and updated hacks and worked with Sean on getting comments working on Tools Setup. IMO, this solves problem of presenting, providing what to do, and capturing in the same place. . Thursday Morning Session 9 - 11 am . Who Belongs in CSP? Thursday Slides . Unit 3 Bridge to programming units starting with Lesson 2 Design Mode, student work in AppLab | Stocks, has several rows and columns. It show a graph and has current price. If you click on a stock it takes you to articles written about the stock | . MSFT /graph 274.17 AAPL /graph 155.98 . Block coding tool is big focus. Pace is slow. | Design session introduced JavaScript commands. It showed onEvent with a function. There is kind of a confusing design and tool back and forth, mostly presenter and online issues. | . Async very quick example that seems to beg for me to say yes to intervention. But IMO, there are bigger fish to fry than someone knowing a stats answer. . BTW, we saw many mistakes presented in Networking lines game, but people were not speaking up. Sometimes it is best to let people just have an answer. | Debugging was topic in video. Positive “make mistakes message”, goes with grading comment made to have check boxes for points, not right or wrong. Learning is a process, everything does not need ot be corrected. | . Planning notes for an Application like the Birds sample, mostly use their code with minor adaptations… . - Stock Quiz - Start Screen Begin Button — 1 — What is most valuable stock on US exchanges? Apple (AAPL) and three wrong — 2 — What is Robin Hood darling stock in 21-22? Game Stop and three wrong — 3 — What is a good philosophy in market? Buy low Sell high and three wrong — Winner Screen — Congrats. Here are some tips before you go invest… Open, Close, Day High/Low, 52 week average — Wrong Answer Screen — Try again, wrong answer. You must get the right answer to continue (move on). . Thursday Afternoon Session 1 - 3 pm . Lab work. Best link for AppLab. My biggest observation was not about the lessons, it was about the cohorts and their Lab work. Many of them were with very excited about their creations. AppLab made some successful and really picked up their excitement. I think Wednesday was a downer for me and perhaps a lot of others and it carried with me into Thu. Today many spirits were lifted. . IMO, Tech success lifts spirits | Teacher cohorts like to see that they coded. AppLab example on QA’s seems to be very intuitive for new coders. I know students like a Quiz and they can lead into Data Analytics, so it is not a bad thing. | I was helping someone that was very new (Patrick) and he seemed to have some intuition about things like Label, Text Box, Button. | Less intuition on Sequencing and Events. Perhaps their should be a little intro to these structures, like placing code inside of events. Also, my view was a little difficult so it was difficult to be a great Pair Programmer as I should have caught some extra clicks in producing excess code. | Finally, Pair Programming is an interactive two brain process. It was weird to hear facilitator talk about Driver/Navigator as if Navigator is more in command position. | . Friday Morning Session 9 - 11 am . Saturday Oct 15, Dec 3, Jan 28, Mar 18 workshop days. . Equity in CompSci Classroom. Sindie talked about zero experience, not only the smart student. . Work load. (Asian, 50% Indian) Mental health is a bigger focus for this year (work load management, more in class work, but lots of information at the beginning of year) | Sonya parent pressure, grade 1st (Korean) Debugging the Gender Gap (video), “what does a coder look like?”. | Jason variety not just group work (Hispanic) | Patrick email: Patrick.davis@inglewoodusd.com | . Assessment changes . Here is instructors percentage guide | Many seem to NOT have a system for this as they don’t have a vision of what they will teach yet. | . CTE/Admin Report with focus on Pathway . Regarding CompSci Pathway, there are no standards. Districts and even schools pick. . My understanding is Districts pick their Curriculum Provider and it often requires Teachers to get a certificate. Code.org is fulfilling district/certificate requirements. Code.org is providing a completely closed platform with its own LMS and tools. | USC and UCSD attachments to Code.org are both using an ncsu.org. NC State system to aggregate teacher completion, for example async work must be captured in the tool. My thoughts are USC, UCSD, NC State are involved in some sort of grant program as an individual pops in and promotes on campus events and opportunities for teacher to get certificate that will help boost pay. There was a USC off campus host managing the class, they are giving Teachers some swag and hours toward certificate. Teachers at training had little and mostly no CompSci experience. | . CS Discovery is a Code.org brand. According to PLTW web site their brand is Essentials. . College Board Lists Curriculum Providers | From Code.org What is CS Discoveries CS Discoveries is designed to fit naturally between our CS Fundamentals courses and our CS Principles course | Computer Science Discoveries is an introductory computer science course for 6 - 10th grade students. | . | From PLTW.org the name is CS Essentials This lists Essentials, Principles, A, Cybersecurity | Principles description has Cybersecurity emphasis | . | . Of course College Board is another business which in turn is advertising groups like Code.org or PLTW.org. However, the are also list Apple which is listed as a provider of curriculum for CompSci Principles. This is kind of fun for me, as it goes back to my Intro year, but this content can be used for CS Principles. Develop in Swift AP CS Principles curriculum helps students build a foundation in programming using Swift—a powerful and intuitive open source programming language designed by Apple—while preparing them for the AP Computer Science Principles Exam. Students will get practical experience with the tools, techniques, and concepts needed to build an iOS app. They’ll learn about the impact of computing, privacy, and security on society, while exploring the technology behind their own activities through interactive stories. Develop in Swift AP CS Principles includes a student and teacher guide available for free on Apple Books. Downloadable Xcode and Playground project files are also available to support the curriculum activities . Back to CTE, the students and teacher. Teacher motivations can vary. My philosophy is teach content and test will fall out. Yesterday I had a Teacher in our breakout say to me… Bottom Line, I want all my students to get 100% on AP exam. End of story. But, I don&#39;t think the Code.org platform, the training I got, and me are going to make it happen. A Student was working with me yesterday and we were dialoguing on Slack. He was working with me on something wrt his internship that was related to certificate deltas between Windows and MacOS. I told the student about my Code.org training I don&#39;t really like the code.org method. My friend goes to a different school and took AP CSP using that curriculum. I personally was unimpressed with that I told the student that I was looking at a softer entrances into PBL I don&#39;t think code.org is the solution, coming from a student perspective. You might want to take a more traditional class approach by teaching everyday at the beginning, which is what students are used to. Then ease into PBL Also, yesterday I had several students working with me on next years classroom tooling. From this experience, all students had their own blogging and tooling platform. IMO, Student are the center. Thus, object should form around student. Not Code.org or LMS. This means they need their own tools and their own objects. This means an open platform to express their engineering . Summary. Sharpen the sword is a phrase used in habit of highly successful people. I learned a lot during the week from Code.org training and platform. Also, I got great exposure to many new teachers entering into Computer Science. I am happy that there is something for these people to grab onto. Also it helped me provide a lesson idea for Sean in our 3rd week (related to interest in block coding). But, for me this is a case of sharpening the sword, there is no intention to adopt the entire curriculum. I hope to continue with my existing approach to CSP curriculum: PBL, Open Platform. Sword sharpening includes: adding softer entries to topics, more traditional lectures in Trimester 1, build muscle for longer term PBL. .",
            "url": "https://nighthawkcoders.github.io/APCSP/workshop/code_dot_org",
            "relUrl": "/workshop/code_dot_org",
            "date": " • Jul 25, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "Neo4J Graph Database Introduction",
            "content": "Introduction . CS-Students is a sample knowledge graph that can be used to model any classroom that is relation based (a classroom that has lots of different people, pairs, groups, periods; things like that). This notebook is meant to demonstrate how to query this knowledge graph based on the preset things that are currently in the sample data. . Data . Currently, the data consists of the following categories (which are labels in Neo4J): . Period (most teachers would find it useful to have their data divided into class periods) . Scrum Team (basically, the largest overarching groups of students, under period) . Pairs (pairs of students within scrum teams) . Person (object that represents each student) . The data also has the following relationships . IN_PERIOD (to relate teams to the period they are in) . CROSSOVER (a relationship that exists to connect pairs of teams which work together) . PAIR_SHARE (relationship defining students who are paired together) . IN_GROUP (to relate people to the group they are in) . Setup in Anaconda . 1: Install Anaconda . 2: On windows, open the Anaconda command prompt. On mac, open the normal terminal. . 3: Run the following commands: . conda install jupyter . conda install py2neo . conda install pandas . conda install neo4jupyter . 4: If you haven&#39;t already, then clone this repository to a location that you can navigate to easily in your files. . 5: The commands above have configured your conda environment. Now, simply run the command . jupyter notebook . 6: This should open up something in the browser. You will see all of your files. Navigate to the directory which has the github repository clone. . 7: Then, navigate to this notebook. You should be able to run this notebook and experience all of its features now! . Setup in an IDE like VSCode . 1: In the IDE terminal, run the following commands: . pip install jupyter . pip install py2neo . pip install pandas . pip install neo4jupyter . 2: You&#39;re all set to run the notebook! . import pandas as pd import getpass from py2neo import Graph, Node, Relationship from py2neo import GraphService import neo4jupyter neo4jupyter.init_notebook_mode() . # The password is made private. password = getpass.getpass(prompt=&#39;Password: &#39;, stream=None) graph = Graph(&quot;neo4j+ssc://f9708be2.databases.neo4j.io&quot;, auth=(&quot;neo4j&quot;, password)) # database gs = GraphService(&quot;neo4j+ssc://f9708be2.databases.neo4j.io&quot;, auth=(&quot;neo4j&quot;, password)) . neo4jupyter.draw(graph, {&quot;PERSON&quot;: &quot;name&quot;}) . query = &quot;MATCH(n:SCRUM_TEAM) RETURN n.name AS TeamName, n.runtimelink AS RuntimeLink&quot; graph.run(query).to_data_frame() . query = &quot;MATCH(n1:PERSON)-[rel:IN_GROUP]-&gt;(n2:SCRUM_TEAM {name: &quot;Team 1 &quot;}) RETURN n1.name AS Person, rel.Job AS Job&quot; graph.run(query).to_data_frame() . query = &quot;MATCH(n1:PERSON)-[rel:IN_GROUP]-&gt;(n2:SCRUM_TEAM {name: &quot;Team 2 &quot;}) RETURN n1.name AS Person, rel.Job AS Job&quot; graph.run(query).to_data_frame() . The following cells show how to do CRUD operations . You can do more than just query! To see your changes in effect, rerun the visualization in the third cell. . def CreatePerson(personName): tx = graph.begin() createdPerson = Node(&quot;PERSON&quot;, name = personName) tx.create(createdPerson) graph.commit(tx) def CreatePersonTester(): n = input(&quot;Enter a person name: &quot;) CreatePerson(n) # Run the CreatePersonTester function to try creating a node. You should be able to find your new node! CreatePersonTester() . # Note that this breaks with duplicate names. This is simply for demonstration purposes. # In a real application, you need to have a way to query by unique ID def UpdateAPerson(personName, newName): graph.evaluate(&quot;MATCH (n:PERSON) WHERE n.name = &quot;&quot; + str(personName) + &quot; &quot; SET n.name= &quot;&quot; + str(newName) + &quot; &quot;&quot;) def UpdateAPersonTester(): o = str(input(&quot;Enter the name you want to change: &quot;)) n = str(input(&quot;Enter the new name: &quot;)) UpdateAPerson(o, n) # Try updating the node that you created in the last code block! UpdateAPersonTester() . # Note that this breaks with duplicate names. This is simply for demonstration purposes. def DeleteAPerson(personName): node = graph.evaluate(&quot;MATCH (n:PERSON) WHERE n.name = &quot;&quot; + str(personName) + &quot; &quot; RETURN n&quot;) try: graph.delete(node) except: return def DeleteAPersonTester(): x = str(input(&quot;Enter a person name: &quot;)) DeleteAPerson(x) # You can try deleting the node that you created by simply entering the person name DeleteAPersonTester() .",
            "url": "https://nighthawkcoders.github.io/APCSP/pbl/2022/07/21/PBL-neo4j_intro.html",
            "relUrl": "/pbl/2022/07/21/PBL-neo4j_intro.html",
            "date": " • Jul 21, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "JavaScript Tutorial",
            "content": "| Overview | Tutorial | Calculator | Binary | Grades | Graph | Life | Snake | . JavaScript Tutorial . console.log output . Output to console using the classic programming introduction using a &quot;Hello, World!&quot; message. . The command or function is console.log() | &quot;Hello, World&quot; is a String literal. This is the referred to as Static text, as it does not change. | &quot;Hello, World&quot; is a parameter to the console.log command. | The console.log command outputs the parameter to the console, so you can see it in this Jupyter document. | Note, in a Web Application, console.log is used for debugging and is not visible from the browser via HTML. It is used behind the scenes, when using Inspect-&gt;Console from the browser. | . console.log(&quot;Hello, World!&quot;); . Hello, World! . console.log output showing use of variable . This second example is a sequence of code, two or more lines forms a sequence. This example defines a variable, then outputs the msg to terminal. . The variable &quot;var msg =&quot; is used to capture the data | The console.log(msg) outputs to console | . var msg = &quot;Hello, World!&quot;; console.log(msg); . Hello, World! . console.log output showing use of a function . This example passes the previously defined variable &quot;msg&quot; to the newly defined &quot;function logIt(output)&quot;. . There are two steps in the code, the definition of the function and the call to the function. &quot;function logIt(output) {}&quot; and everything between curly braces is the definitions of the function. | &quot;logIt(msg)&quot; is the call to the function, this actually activates the function. If you remove this line you will not receive any output to console. | . | Since the variable &quot;msg&quot; was defined in previous cell, it is used a parameter when calling the logMessage function. | . function logIt(output) { console.log(output); } logIt(msg); . Hello, World! . Showing reuse of a function . Now that a function is defined, it can be called from any of the subsequent cell in the Jupyter notebook. A function/method, is a process of creating a procedural abstraction. This a programming practice to promote reuse versus coding the same thing over and over. . First call sends a different string message | Second call sends a number | . console.log(&quot;Reuse of logIT&quot;) logIt(&quot;Hello, Students!&quot;); logIt(2022) . Reuse of logIT Hello, Students! 2022 . Dynamic or Loosely typed language (string, number) . JavaScript is a loosely typed language, meaning you don&#39;t have to specify what type of information will be stored in a variable in advance. The variable type is determined at runtime. This is similar to Python and most interpretive languages. Java which is a compiled language is strongly typed, thus you will see string, integer, double, and object in the source code. In JavaScript, the &quot;typeof&quot; keyword returns the type. . function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } console.log(&quot;Looking at dynamic nature of types in JavaScript&quot;) logItType(&quot;hello&quot;); // String logItType(2020); // Number logItType([1, 2, 3]); // Object is generic for this Array, which similar to Python List . Looking at dynamic nature of types in JavaScript string ; hello number ; 2020 object ; [ 1, 2, 3 ] . Build a Person Function/Class object and JSON . JavaScript functions have special properties and syntax is shown in many ways. In fact, a Class in JavaScript is a special function. Jupyter Notebooks seems to be more friendly to &quot;function&quot; definitions versus &quot;Class&quot;, thus this lesson uses &quot;function&quot; and &quot;prototype&quot; versus &quot;Class&quot;. . Definition of function allows for a collection of data, the &quot;function Person&quot; allows programmer to retain name, github id, and class of designation. | Definition of a prototype allow for the definition of a method associated with the function , the &quot;Person.prototype.toJSON&quot; allows the collection of data to be expressed in a json/string versus JavaScript object. | Instance of a function, the &quot;var teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977)&quot; line makes a variable &quot;teacher&quot; which is an object representation of &quot;function Person&quot;. | . // define a function to hold data for a Person function Person(name, ghID, classOf) { this.name = name; this.ghID = ghID; this.classOf = classOf; this.role = &quot;&quot;; } // define a setter for role in Person data Person.prototype.setRole = function(role) { this.role = role; } // define a JSON conversion &quot;method&quot; associated with Person Person.prototype.toJSON = function() { const obj = {name: this.name, ghID: this.ghID, classOf: this.classOf, role: this.role}; const json = JSON.stringify(obj); return json; } // make a new Person and assign to variable teacher var teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977); teacher.setRole(&quot;Teacher&quot;); // output of Object and JSON/string associated with Teacher logItType(teacher); // object type is easy to work with in JavaScript logItType(teacher.toJSON()); // json/string is useful when passing data on internet . object ; Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; } string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;} . Build a Classroom Array/List of Persons and JSON . Many key elements are shown again. New elements include... . Building an Array, &quot;var students&quot; is an array of many persons | Building a Classroom, this show forEach iteration through an array and .push adding to an array. These are key concepts in all programming languages. | . // define a student Array of Person(s) var students = [ new Person(&quot;Anthony&quot;, &quot;tonyhieu&quot;, 2022), new Person(&quot;Bria&quot;, &quot;B-G101&quot;, 2023), new Person(&quot;Allie&quot;, &quot;xiaoa0&quot;, 2023), new Person(&quot;Tigran&quot;, &quot;Tigran7&quot;, 2023), new Person(&quot;Rebecca&quot;, &quot;Rebecca-123&quot;, 2023), new Person(&quot;Vidhi&quot;, &quot;unknown&quot;, 2024) ]; // define a classroom and build Classroom objects and json function Classroom(teacher, students){ // 1 teacher, many student // start Classroom with Teacher teacher.setRole(&quot;Teacher&quot;); this.teacher = teacher; this.classroom = [teacher]; // add each Student to Classroom this.students = students; this.students.forEach(student =&gt; { student.setRole(&quot;Student&quot;); this.classroom.push(student); }); // build json/string format of Classroom this.json = []; this.classroom.forEach(person =&gt; this.json.push(person.toJSON())); } // make a CompSci classroom from formerly defined teacher and students compsci = new Classroom(teacher, students); // output of Objects and JSON in CompSci classroom logItType(compsci.classroom); // constructed classroom object logItType(compsci.classroom[0].name); // abstract 1st objects name logItType(compsci.json[0]); // show json conversion of 1st object to string logItType(JSON.parse(compsci.json[0])); // show JSON.parse inverse of JSON.stringify . object ; [ Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; }, Person { name: &#39;Anthony&#39;, ghID: &#39;tonyhieu&#39;, classOf: 2022, role: &#39;Student&#39; }, Person { name: &#39;Bria&#39;, ghID: &#39;B-G101&#39;, classOf: 2023, role: &#39;Student&#39; }, Person { name: &#39;Allie&#39;, ghID: &#39;xiaoa0&#39;, classOf: 2023, role: &#39;Student&#39; }, Person { name: &#39;Tigran&#39;, ghID: &#39;Tigran7&#39;, classOf: 2023, role: &#39;Student&#39; }, Person { name: &#39;Rebecca&#39;, ghID: &#39;Rebecca-123&#39;, classOf: 2023, role: &#39;Student&#39; }, Person { name: &#39;Vidhi&#39;, ghID: &#39;unknown&#39;, classOf: 2024, role: &#39;Student&#39; } ] string ; Mr M string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;} object ; { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; } . IJavaScript and Table formatting using toHTML method . This example builds a Classroom method _toHTML which is passed to the IJavaScript interpreter $$.html which renders output similarly to a real website. . JavaScript in the _toHTML method is broken into three parts... Style part is building CSS inline formatting | Body part is constructing the Table Rows (tr), Table Headings (th), and Table Data (td). The table data is obtained from a Classroom object. The JavaScript for loop allows the construction of a new row of data for each person object in the Array. | Return part creates the HTML fragment for rendering | . | The last line in the example $$.html is IJavaScript HTML interpreter and by passing the parameter of the _toHTML method it obtains HTML to render | . // define an HTML conversion &quot;method&quot; associated with Classroom Classroom.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;background:black;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;GitHub ID&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Class Of&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of compsci.classroom for (var row of compsci.classroom) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.ghID + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.classOf + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(compsci._toHtml()); . NameGitHub IDClass OfRole . Mr M | jm1021 | 1977 | Teacher | Anthony | tonyhieu | 2022 | Student | Bria | B-G101 | 2023 | Student | Allie | xiaoa0 | 2023 | Student | Tigran | Tigran7 | 2023 | Student | Rebecca | Rebecca-123 | 2023 | Student | Vidhi | unknown | 2024 | Student | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . . .",
            "url": "https://nighthawkcoders.github.io/APCSP/frontend/javascript",
            "relUrl": "/frontend/javascript",
            "date": " • Jul 19, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "Calculator Starters",
            "content": "| Overview | Tutorial | Calculator | Binary | Grades | Graph | Life | Snake | . 0 1 2 3 + 4 5 6 - 7 8 9 * A/C 0 . =",
            "url": "https://nighthawkcoders.github.io/APCSP/frontend/calculator",
            "relUrl": "/frontend/calculator",
            "date": " • Jul 19, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "Fetch of Covid19 data with RapidAPI",
            "content": "| Overview | Covid19 RapidAPI | Jokes API | Users Database | . Time All-time Cases Recorded Deaths Active Cases . | | | | Country All-time Cases Recorded Deaths Active Cases .",
            "url": "https://nighthawkcoders.github.io/APCSP/data/covid",
            "relUrl": "/data/covid",
            "date": " • Jul 10, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "Fetch of Backend Jokes",
            "content": "| Overview | Covid19 RapidAPI | Jokes API | Users Database | . Joke HaHa Boohoo .",
            "url": "https://nighthawkcoders.github.io/APCSP/data/jokes",
            "relUrl": "/data/jokes",
            "date": " • Jul 10, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Database CRUD Operations",
            "content": "| Overview | Covid19 RapidAPI | Jokes API | Users Database | . Database API .",
            "url": "https://nighthawkcoders.github.io/APCSP/data/database",
            "relUrl": "/data/database",
            "date": " • Jul 10, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "Classic Snake Game",
            "content": "| Overview | Tutorial | Calculator | Binary | Grades | Graph | Life | Snake | . Snake score: 0 . . Welcome to Snake, press space to begin . new game settings Game Over, press space to try again . new game settings Settings Screen, press space to go back to playing . new game Speed: Slow Normal Fast . Wall: On Off .",
            "url": "https://nighthawkcoders.github.io/APCSP/frontend/snake",
            "relUrl": "/frontend/snake",
            "date": " • Jul 8, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "Game of Life",
            "content": "| Overview | Tutorial | Calculator | Binary | Grades | Graph | Life | Snake | . Remix of Game of Life . start step",
            "url": "https://nighthawkcoders.github.io/APCSP/frontend/life",
            "relUrl": "/frontend/life",
            "date": " • Jul 8, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "Graphing App",
            "content": "| Overview | Tutorial | Calculator | Binary | Grades | Graph | Life | Snake | . Graphing grid .",
            "url": "https://nighthawkcoders.github.io/APCSP/frontend/graph",
            "relUrl": "/frontend/graph",
            "date": " • Jul 8, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "Grade Calculator",
            "content": "| Overview | Tutorial | Calculator | Binary | Grades | Graph | Life | Snake | . Grade Calculator . Total : 0.0 Count : 0.0 Average : 0.0 Input scores, press tab to add new number:",
            "url": "https://nighthawkcoders.github.io/APCSP/frontend/grades",
            "relUrl": "/frontend/grades",
            "date": " • Jul 8, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "Binary Math",
            "content": "| Overview | Tutorial | Calculator | Binary | Grades | Graph | Life | Snake | . Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 0 | 0 | -1 | . Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | . | | | | | | | | .",
            "url": "https://nighthawkcoders.github.io/APCSP/frontend/binary",
            "relUrl": "/frontend/binary",
            "date": " • Jul 7, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "Deployment Guide",
            "content": "Deployment Overview . Deploying a Web Application enables a Server to serve the components of a Web Application to clients. Deployment is the tools and service used to enable the Web Application on the Internet. The process of can use many different cloud servers, as well as choice in tools and services. . EC2: Amazon Web Services is a cloud computing platform that the PUSD district has provided for us to serve our Web Application. | GitHub: At this point in time, we should be aware that we are using GitHub is an open platform to share our Web Application code on the Internet. | Docker and docker-compose: To host a Web Application you need to prepare an environment that contains the Web Application code and all the dependencies (requirements.txt for Python) Docker is an open platform for developing, shipping, and running applications. | Nginx: To find a Web Application on a server, there needs to be a process to listen for the Web request and direct it to the Web Application. Nginx is an open source software for web serving, reverse proxy, caching, load balancing, media streaming, and more. | Certbot: Web traffic on internet is reliably served over Secure Hyper Text Transfer Protocol (https). Certbot is a free, open source software tool for automatically using Let’s Encrypt certifications | DNS: Natively, the web works off of IP addresses. Domain Name Services (DNS) allows the assignment of a friendly name to our Web Server. This name is built into Nginx/Certbot configuration files. Freenom is the service used to register the nighthawkcodingsociety.com domain. | . Key/Values required as you go through these procedures . Listed are Keys, you need to obtain Values. It is important that you recognize the sample Values as you work through these procedures, then replace them with the Values that are specific to your use case. . GitHub HTTPS link: | IAM user: | EC2 name: | EC2 Public IPs: | DNS Name: | DNS Subdomain name(s) | Docker Port: | docker-compose, proxy pass Port: | docker-compose, docker Image: | Nginx server file(s): | . Amazon Web Services (AWS): Electric Cloud Compute (EC2) Setup . Preparing and AWS EC2 instance is the process of creating a cloud computer. This process starts by logging into your AWS IAM user, searching for EC2. . To get started, launch a new AWS EC2 instance to learn process and understand how to work with Linux. here are some key considerations. Choose an Amazon Machine Image (AMI), the class will be using Ubuntu you should check on last verified version with a Teacher before proceeding | When it comes to picking memory or disk it is VERY important to pick Free Tier. As stated, this will only be used for testing and then it will be disposed for cost efficiency. | When presented with access dialog for http and https, make sure you check these boxes. Remember you are making a Web application that will run over http and https. | Name the security group (.pem) file after your team. It may be necessary to use SSH to access your EC2 instance. | The remainder of the steps you can use the defaults, refer to AWS documentation for guidance: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EC2_GetStarted.html | At the end of this process you need to “Connect to Instance”. This will provide you a terminal like experience. | . | . Update, Upgrade, and Install packages . Terminal commands are shown, these commands will be run from Terminal after you connect to your EC2 name. These commands update and then upgrade all your packages in your system. . $ sudo apt update; sudo apt upgrade $ sudo apt install python3-pip nginx $ sudo pip3 install virtualenv . Clone and Change Directory to project location . This command move your Web Application code onto you EC2 cloud computer.The sample GithUb HTTPs Link is demonstration is: https://github.com/nighthawkcoders/flask_portfolio.git. . $ cd $ git clone https://github.com/nighthawkcoders/flask_portfolio.git $ cd flask_portfolio . Test Web Service . These steps will require you to understand a few new commands that will not be part of final deployment process. However, these commands will help you understand machine dependencies and validate your requirements.txt for completeness. . $ cd ~/flask_portfolio $ virtualenv -p /usr/bin/python3 webapp $ source webapp/bin/activate $ pip install -r requirements.txt $ python main.py . Failed result. If you get a result that looks like the below, your requirements.txt needs work. In this instance, I would need to add flask to the requirements.txt. | . (webapp) ubuntu@ip-172-31-1-138:~/flask_portfolio$ python main.py Traceback (most recent call last): File &quot;main.py&quot;, line 2, in &lt;module&gt; from flask import Flask, render_template ModuleNotFoundError: No module named &#39;flask&#39; (webapp) ubuntu@ip-172-31-1-138:~/flask_portfolio$ . Correct result. A successful result will look like the following. At this point we will type “ctrl+c” and then at prompt “deactivate”, as we will now build and run a Docker File to deploy in more automated fashion. | . (webapp) ubuntu@ip-172-31-1-138:~/flask_portfolio$ python main.py * Serving Flask app &#39;main&#39; (lazy loading) * Environment: production WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead. * Debug mode: on * Running on http://127.0.0.1:5000 (Press CTRL+C to quit) * Restarting with stat * Debugger is active! * Debugger PIN: 710-199-540 . Create Dockerfile to run Web Service . A Dockerfile is a configuration used to run the Web Service. This is placed in a file called Dockerfile. It is best to add this to VS Code and pull it, or you can update in place with nano, vi, or vim editor and use command line commands to push it into your repository. The Dockerfile should be considered Code! . Edit the Dockerfile $ nano Dockerfile . | Insert the Dockerfile commands, note that they are similar to Bash commands performed earlier. Follow prompts on screen to save file when complete, look for Key/Value (GitHub HTTPS link) that requires change for your project. FROM docker.io/python:3.9 WORKDIR /app # Update environment and install python and pip RUN apt-get update &amp;&amp; apt-get upgrade -y &amp;&amp; apt-get install -y python3 python3-pip git RUN git clone https://github.com/nighthawkcoders/flask_portfolio /app # Install project specific dependencies RUN pip3 install --no-cache-dir -r requirements.txt RUN pip3 install gunicorn # Setup args to run 3 workers and run on port 8080 ENV GUNICORN_CMD_ARGS=&quot;--workers=3 --bind=0.0.0.0:8080&quot; # Allow port 8080 to be accessed by system EXPOSE 8080 # Run Web Application in production style CMD [ &quot;gunicorn&quot;, &quot;main:app&quot; ] . | . Create docker-compose file share Web Service . A docker-compose file is a configuration used to share your Docker Web Service and resources with the Linux system. This file enable Linux to have access to the container and the persistent data application via the /volumes location. . Once again it is best to add the docker-compose.yml in VS Code and pull it. You can edit it on the machine itself using vi, vim, or nano. . Edit docker-compose.yml $ nano docker-compose.yml . | Insert the docker-compose.yml Keys/Values. version: &#39;3&#39; services: web: image: flask_port_v1 build: . ports: - &quot;8086:8080&quot; volumes: - persistent_volume:/app/volumes volumes: persistent_volume: driver: local driver_opts: o: bind type: none device: /home/ubuntu/flask_portfolio/volumes . | . Running Docker using docker-compose.yml . At this point, it is best to review complete files on GitHub and for Docker and docker-compose: https://github.com/nighthawkcoders/flask_portfolio. Review the Key/Values mentioned in this document. Make sure your Docker and docker-compose files a personalized to your project. . Make sure you are in project directory $ cd ~/flask_portfolio/ . | Run docker-compose $ docker-compose up -d . | Output from docker-compose. When running this command, docker-compose will run all the Docker steps and build a Web Application running in a Docker container, a virtual environment. | . Creating network &quot;flask_portfolio_default&quot; with the default driver Building web Step 1/9 : FROM docker.io/python:3.9 &gt; d0ce03c9330c Step 2/9 : WORKDIR /app .... LOTS of STEPs and OUTPUT ... Successfully built 68d68ad9699b Successfully tagged flask_port_v1:latest WARNING: Image for service web was built because it did not already exist. To rebuild this image you must use `docker-compose build` or `docker-compose up --build`. Creating flask_portfolio_web_1 ... done . Verifying Web Application via Docker commands . Here is a look at some of the commands behind the scenes. None of these are required to get things working, but show the results of the Docker and docker-compose.yml files and commands. . docker-compose ps The running Web process, “ps” is a linux command or option that provides information related to the processes on a system. Look at headings in relation to outputs of the docker-compose process. ubuntu@ip-172-31-1-138:~/flask_portfolio$ docker-compose ps Name Command State Ports -- flask_portfolio_web_1 gunicorn main:app Up 0.0.0.0:8086-&gt;8080/tcp,:::8086-&gt;8080/tcp . | docker ps A more comprehensive list of all the docker processes on the system. In this process reports, many of the alternate projects running on this AWS server are show. The flask_portfolio_web_1 process is the items specific to this tutorial. buntu@ip-172-31-1-138:~/flask_portfolio$ docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 749a93bc11ce flask_port_v1 &quot;gunicorn main:app&quot; 45 minutes ago Up 45 minutes 0.0.0.0:8086-&gt;8080/tcp, :::8086-&gt;8080/tcp flask_portfolio_web_1 89155782b853 java_springv1 &quot;java -jar target/sp…&quot; 6 days ago Up 6 days 0.0.0.0:8085-&gt;8080/tcp, :::8085-&gt;8080/tcp spring_portfolio_web_1 9415d6397d2e python_cspv1 &quot;gunicorn main:app&quot; 2 weeks ago Up 2 weeks 0.0.0.0:8082-&gt;8080/tcp, :::8082-&gt;8080/tcp nighthawk_csp_web_1 4bf324458bf6 python_laxv1 &quot;gunicorn main:app&quot; 5 weeks ago Up 5 weeks 0.0.0.0:8084-&gt;8080/tcp, :::8084-&gt;8080/tcp lax_web_1 7a6dff6425e9 python_ctev1 &quot;gunicorn main:app&quot; 5 weeks ago Up 5 weeks 0.0.0.0:8083-&gt;8080/tcp, :::8083-&gt;8080/tcp cte_web_1 abd77b8e77af java_csav2 &quot;java -jar target/cs…&quot; 5 weeks ago Up 5 weeks 0.0.0.0:8081-&gt;8080/tcp, :::8081-&gt;8080/tcp nighthawk_csa_web_1 . | docker images This lists all of the docker images, or containers, that are used to serve the process shown above. The flask_port_v1 is the image created from the Docker file created in this tutorial. The image contains the running Web application. ubuntu@ip-172-31-1-138:~/flask_portfolio$ docker images REPOSITORY TAG IMAGE ID CREATED SIZE flask_port_v1 latest 68d68ad9699b 51 minutes ago 1.01GB java_springv1 latest e85a584b1836 6 days ago 523MB python_laxv1 latest 713c84a30d3b 5 weeks ago 1.16GB python_ctev1 latest 1608eaee06c7 5 weeks ago 1.18GB python_cspv1 latest b9bb27be863b 5 weeks ago 1.12GB java_csav2 latest 4055a9fd5ea7 5 weeks ago 570MB python 3.9 d0ce03c9330c 7 weeks ago 915MB alpine latest e66264b98777 8 weeks ago 5.53MB openjdk 16-alpine3.13 2aa8569968b8 17 months ago 324MB . | . Preparing the Docker Web Application for Internet Access . There are a couple of steps to this preparation. We need to direct the internet to the Server running the Web Application, this is done using Domain Name Service (DNS). After being directed to the Web Server, the server needs to respond to the Hyper Text Transfer Protocol (HTTP), this will be manged by Nginx. Additionally, we will be required to support Secure HTTP (HTTPS), a utility called Certbot will augment our Nginx configuration with a certificate. . DNS provider and setup . Each student scrum team is required to learn how to obtain a DNS provider and setup an independent domain. However, the final set up will be using a Subdomain under nighthawkcodingsociety.com. . A picture is included to show key elements in setting up a domain with a DNS provider. The nighthawkcodingsociety.com is using Freenom as its service provider. As you build your own DNS server you will need to obtain your own IP address and domain. . This illustration is dependent on… . EC2 Public IPs: 3.233.212.71 | DNS Name: nighthawkcodingsociety.com | DNS Subdomain name(s): battleship.nighthawkcodingsociety.com. cowboys.nighthawkcodingsociety.com | . A minimum configuration will have the two “A” type definitions using you Public IP address. These two are resolved with a single Web Application. The “CNAME” type is used for subdomains, these will resolve to a different Web Application. . &lt;img atl=”Setup a Domain” src=”/APCSP/images/freenom.png” title=”DNS Provider” . Nginx install, configuration, and services . Each student scrum team will perform Nginx installation and setup on an AWS EC2 test server. The final configuration will be on AWS server managed by Teachers or Student DevOps Engineers. . Enable Nginx to retrieve Python Web Application on internet request (Reverse Proxy)! Make a server file located at /etc/nginx/sites-available/nighthawk. . Install Nginx on Ubuntu servers $ sudo apt install nginx . | Go to location of Nginx server configuration files $ cd /etc/nginx/sites-available . | Open editor to Create your own “Nginx server configuration” $ nano nighthawk . | Edit your own Nginx server configuration making modifications to: DNS Name(s): nighthawkcodingsociety.com www.nighthawkcodingsociety.com | docker-compose, proxy pass Port: 8086 | . | . server { listen 80; listen [::]:80; server_name nighthawkcodingsociety.com www.nighthawkcodingsociety.com; location / { proxy_pass http://localhost:8086; # Simple requests if ($request_method ~* &quot;(GET|POST)&quot;) { add_header &quot;Access-Control-Allow-Origin&quot; *; } # Preflight requests if ($request_method = OPTIONS ) { add_header &quot;Access-Control-Allow-Origin&quot; *; add_header &quot;Access-Control-Allow-Methods&quot; &quot;GET, POST, OPTIONS, HEAD&quot;; add_header &quot;Access-Control-Allow-Headers&quot; &quot;Authorization, Origin, X-Requested-With, Content-Type, Accept&quot;; return 200; } } } . Activate/enabled Nginx server configuration: $ sudo ln -s /etc/nginx/sites-available/nighthawk /etc/nginx/sites-enabled $ sudo nginx -t . | If there are no errors, restart NGINX so the server is an endpoint to the internet: $ sudo systemctl restart nginx . | . Testing HTTP endpoint . Before finishing, this is a good opportunity to test everything you have done. . Direct Test of Web Application Endpoint. This should return HTML related to the home page of the Web site. If this fails, you need to review Docker and docker-compose configurations. $ curl http://localhost:8086; . | Testing unsecure HTTP endpoint on the internet. Go to a browser an type your DNS domain: http://nighthawkcodingsociety.com. Timeout. This means something is wrong with EC2 Public IP. | Nginx Default page. This means DNS is working, but something is wrong with you Nginx configuration. | Broken Gateway. This means Nginx is working, but something is wrong with Web Application endpoint on machine, if this fails something is wrong with Web Application. This requires you to look at Docker and docker-compose configuration. | . | . Certbot install and configuration . Each student scrum team will learn Certbot on on AWS EC2 test server, establish working https web application. The final configuration will be on AWS server managed by Teachers or Student DevOps Engineers. . $ sudo certbot --nginx . Saving debug log to /var/log/letsencrypt/letsencrypt.log Plugins selected: Authenticator nginx, Installer nginx Which names would you like to activate HTTPS for? - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 1: nighthawkcodingsociety.com 2: csa.nighthawkcodingsociety.com 3: csp.nighthawkcodingsociety.com 4: flm.nighthawkcodingsociety.com - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - Select the appropriate numbers separated by commas and/or spaces, or leave input blank to select all options shown (Enter &#39;c&#39; to cancel): Cert not yet due for renewal You have an existing certificate that has exactly the same domains or certificate name you requested and isn&#39;t close to expiry. (ref: /etc/letsencrypt/renewal/nighthawkcodingsociety.com-0001.conf) What would you like to do? - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 1: Attempt to reinstall this existing certificate 2: Renew &amp; replace the cert (limit ~5 per 7 days) - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - Select the appropriate number [1-2] then [enter] (press &#39;c&#39; to cancel): 2 Renewing an existing certificate Performing the following challenges: http-01 challenge for nighthawkcodingsociety.com http-01 challenge for csa.nighthawkcodingsociety.com http-01 challenge for cso.nighthawkcodingsociety.com http-01 challenge for flm.nighthawkcodingsociety.com Waiting for verification... Cleaning up challenges Deploying Certificate to VirtualHost /etc/nginx/sites-enabled/nighthawk_society Deploying Certificate to VirtualHost /etc/nginx/sites-enabled/nighthawk_csa Deploying Certificate to VirtualHost /etc/nginx/sites-enabled/nighthawk_csp Deploying Certificate to VirtualHost /etc/nginx/sites-enabled/nighthawk_flm Please choose whether or not to redirect HTTP traffic to HTTPS, removing HTTP access. - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 1: No redirect - Make no further changes to the webserver configuration. 2: Redirect - Make all requests redirect to secure HTTPS access. Choose this for new sites, or if you&#39;re confident your site works on HTTPS. You can undo this change by editing your web server&#39;s configuration. - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - Select the appropriate number [1-2] then [enter] (press &#39;c&#39; to cancel): 2 Traffic on port 80 already redirecting to ssl in /etc/nginx/sites-enabled/nighthawk_society Traffic on port 80 already redirecting to ssl in /etc/nginx/sites-enabled/nighthawk_csa Traffic on port 80 already redirecting to ssl in /etc/nginx/sites-enabled/nighthawk_csp Traffic on port 80 already redirecting to ssl in /etc/nginx/sites-enabled/nighthawk_flm - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - Your existing certificate has been successfully renewed, and the new certificate has been installed. The new certificate covers the following domains: https://nighthawkcodingsociety.com, https://csa.nighthawkcodingsociety.com, https://csp.nighthawkcodingsociety.com, and https://flm.nighthawkcodingsociety.com, You should test your configuration at: https://www.ssllabs.com/ssltest/analyze.html?d=nighthawkcodingsociety.com https://www.ssllabs.com/ssltest/analyze.html?d=csa.nighthawkcodingsociety.com https://www.ssllabs.com/ssltest/analyze.html?d=csp.nighthawkcodingsociety.com https://www.ssllabs.com/ssltest/analyze.html?d=flm.nighthawkcodingsociety.com - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - IMPORTANT NOTES: - Congratulations! Your certificate and chain have been saved at: /etc/letsencrypt/live/nighthawkcodingsociety.com-0001/fullchain.pem Your key file has been saved at: /etc/letsencrypt/live/nighthawkcodingsociety.com-0001/privkey.pem Your cert will expire on 2022-03-06. To obtain a new or tweaked version of this certificate in the future, simply run certbot again with the &quot;certonly&quot; option. To non-interactively renew *all* of your certificates, run &quot;certbot renew&quot; - If you like Certbot, please consider supporting our work by: Donating to ISRG / Let&#39;s Encrypt: https://letsencrypt.org/donate Donating to EFF: https://eff.org/donate-le .",
            "url": "https://nighthawkcoders.github.io/APCSP/techtalk/deploy",
            "relUrl": "/techtalk/deploy",
            "date": " • Jun 1, 2022"
        }
        
    
  
    
        ,"post36": {
            "title": "Python Web API Endpoints using Jokes",
            "content": "Model for API . We will begin our journey into APIs by creating and thinking about data. We have learned about Python Lists and dictionaries. In this data example, we are going to make &quot;the best computer jokes ever ;)&quot; and serve them over the Internet. The ultimate objective is to allow our viewers to provide a like or dislike on each of our jokes. . This code planning begins by coming up with some jokes and defining a data &quot;model&quot; to keep and manage the jokes. . jokes_data contains a list of dictionary records containing joke and reactions:haha or boohoo - joke_list contains collection of jokes we will put into jokes_data | . | Next comes some functions to interact with our jokes . def initJokes(): initializes jokes_data | def getJokes(): returns the complete list of jokes | def getJoke(): returns a single joke from our list | ... many more function can be examined by reading comments below ... | . | . import random jokes_data = [] joke_list = [ &quot;If you give someone a program... you will frustrate them for a day; if you teach them how to program... you will &quot; &quot;frustrate them for a lifetime.&quot;, &quot;Q: Why did I divide sin by tan? A: Just cos.&quot;, &quot;UNIX is basically a simple operating system... but you have to be a genius to understand the simplicity.&quot;, &quot;Enter any 11-digit prime number to continue.&quot;, &quot;If at first you don&#39;t succeed; call it version 1.0.&quot;, &quot;Java programmers are some of the most materialistic people I know, very object-oriented&quot;, &quot;The oldest computer can be traced back to Adam and Eve. It was an apple but with extremely limited memory. Just &quot; &quot;1 byte. And then everything crashed.&quot;, &quot;Q: Why did Wi-Fi and the computer get married? A: Because they had a connection&quot;, &quot;Bill Gates teaches a kindergarten class to count to ten. 1, 2, 3, 3.1, 95, 98, ME, 2000, XP, Vista, 7, 8, 10.&quot;, &quot;Q: What’s a aliens favorite computer key? A: the space bar!&quot;, &quot;There are 10 types of people in the world: those who understand binary, and those who don’t.&quot;, &quot;If it wasn&#39;t for C, we’d all be programming in BASI and OBOL.&quot;, &quot;Computers make very fast, very accurate mistakes.&quot;, &quot;Q: Why is it that programmers always confuse Halloween with Christmas? A: Because 31 OCT = 25 DEC.&quot;, &quot;Q: How many programmers does it take to change a light bulb? A: None. It’s a hardware problem.&quot;, &quot;The programmer got stuck in the shower because the instructions on the shampoo bottle said: Lather, Rinse, Repeat.&quot;, &quot;Q: What is the biggest lie in the entire universe? A: I have read and agree to the Terms and Conditions.&quot;, &#39;An SQL statement walks into a bar and sees two tables. It approaches, and asks may I join you?&#39; ] # Initialize jokes def initJokes(): # setup jokes into a dictionary with id, joke, haha, boohoo item_id = 0 for item in joke_list: jokes_data.append({&quot;id&quot;: item_id, &quot;joke&quot;: item, &quot;haha&quot;: 0, &quot;boohoo&quot;: 0}) item_id += 1 # prime some haha responses for i in range(200): id = getRandomJoke()[&#39;id&#39;] addJokeHaHa(id) # prime some haha responses for i in range(50): id = getRandomJoke()[&#39;id&#39;] addJokeBooHoo(id) # Return all jokes from jokes_data def getJokes(): return(jokes_data) # Joke getter def getJoke(id): return(jokes_data[id]) # Return random joke from jokes_data def getRandomJoke(): return(random.choice(jokes_data)) # Liked joke def favoriteJoke(): best = 0 bestID = -1 for joke in getJokes(): if joke[&#39;haha&#39;] &gt; best: best = joke[&#39;haha&#39;] bestID = joke[&#39;id&#39;] return jokes_data[bestID] # Jeered joke def jeeredJoke(): worst = 0 worstID = -1 for joke in getJokes(): if joke[&#39;boohoo&#39;] &gt; worst: worst = joke[&#39;boohoo&#39;] worstID = joke[&#39;id&#39;] return jokes_data[worstID] # Add to haha for requested id def addJokeHaHa(id): jokes_data[id][&#39;haha&#39;] = jokes_data[id][&#39;haha&#39;] + 1 return jokes_data[id][&#39;haha&#39;] # Add to boohoo for requested id def addJokeBooHoo(id): jokes_data[id][&#39;boohoo&#39;] = jokes_data[id][&#39;boohoo&#39;] + 1 return jokes_data[id][&#39;boohoo&#39;] # Pretty Print joke def printJoke(joke): print(joke[&#39;id&#39;], joke[&#39;joke&#39;], &quot; n&quot;, &quot;haha:&quot;, joke[&#39;haha&#39;], &quot; n&quot;, &quot;boohoo:&quot;, joke[&#39;boohoo&#39;], &quot; n&quot;) # Number of jokes def countJokes(): return len(jokes_data) # Test Joke Model if __name__ == &quot;__main__&quot;: initJokes() # initialize jokes # Most likes and most jeered best = favoriteJoke() print(&quot;Most liked&quot;, best[&#39;haha&#39;]) printJoke(best) worst = jeeredJoke() print(&quot;Most jeered&quot;, worst[&#39;boohoo&#39;]) printJoke(worst) # Random joke print(&quot;Random joke&quot;) printJoke(getRandomJoke()) # Count of Jokes print(&quot;Jokes Count: &quot; + str(countJokes())) . Backend Interface for Web API (Control) . An application programming interface (API) is the medium by which different systems of software interact. In our applications we have two big systems:1. Python Backend that stores data beyond a single Web page2. GH Pages/Fastpages Frontend that is responsible for presenting data . To communicate data between Frontend and Backend, this section Backend code provides and interface to the Frontend using a Web Service Endpoint. Examples of endpoints are listed below and can be typed within a browser, which will return JSON data: . https://flask.nighthawkcodingsociety.com/api/jokes | https://flask.nighthawkcodingsociety.com/api/jokes/2 | https://flask.nighthawkcodingsociety.com/api/jokes/random | . As you can see, these Endpoints return JSON. They are NOT that readable by normal humans. However, they are very effective in passing requested data across the Internet. The Frontend code is responsible for formatting and presenting and interface that allows the typical computer user to interact with this data. . The next cell of code is Creating Endpoints that return JSON. This allows developers in the Frontend to interact with Backend data. API is a contract between the Frontend and Backend on how to share data. . FYI, there is NO output from this section . . from flask import Blueprint, jsonify # jsonify creates an endpoint response object from flask_restful import Api, Resource # used for REST API building import requests # used for testing import random # Blueprints allow this code to be procedurally abstracted from main.py, meaning code is not all in one place app_api = Blueprint(&#39;api&#39;, __name__, url_prefix=&#39;/api/jokes&#39;) # endpoint prefix avoid redundantly typing /api/jokes over and over # API generator https://flask-restful.readthedocs.io/en/latest/api.html#id1 api = Api(app_api) class JokesAPI: # not implemented, this would be where we would allow creation of a new Joke class _Create(Resource): def post(self, joke): pass # getJokes() class _Read(Resource): def get(self): return jsonify(getJokes()) # getJoke(id) class _ReadID(Resource): def get(self, id): return jsonify(getJoke(id)) # getRandomJoke() class _ReadRandom(Resource): def get(self): return jsonify(getRandomJoke()) # getRandomJoke() class _ReadCount(Resource): def get(self): count = countJokes() countMsg = {&#39;count&#39;: count} return jsonify(countMsg) # put method: addJokeHaHa class _UpdateLike(Resource): def put(self, id): addJokeHaHa(id) return jsonify(getJoke(id)) # put method: addJokeBooHoo class _UpdateJeer(Resource): def put(self, id): addJokeBooHoo(id) return jsonify(getJoke(id)) # building RESTapi interfaces, these routes are added to Web Server http://&lt;server&lt;/api/jokes api.add_resource(_Create, &#39;/create/&lt;string:joke&gt;&#39;) api.add_resource(_Read, &#39;/&#39;) # default, which returns all jokes api.add_resource(_ReadID, &#39;/&lt;int:id&gt;&#39;) api.add_resource(_ReadRandom, &#39;/random&#39;) api.add_resource(_ReadCount, &#39;/count&#39;) api.add_resource(_UpdateLike, &#39;/like/&lt;int:id&gt;/&#39;) api.add_resource(_UpdateJeer, &#39;/jeer/&lt;int:id&gt;/&#39;) . Frontend (View Simulation) and Hacks . This python codes tests endpoints on a server. This can be handy for development and testing when making modifications to the Jokes Web APIs. This code works off of the server endpoint/url, not from code cells above it in this notebook. . To work with this code and make observation for learning... . Run a local server from flask_portfolio project and the change server variable to be local | Observe the requests endpoints and the output, see if you can observe what is happening/changing on put requests | The &quot;requests&quot; are captured into a List, the List is used in the for loop to extract from RESTful API format. | Try running this with Debugging and observe what data is being created at each step (Required) | Try to format this data in Python print statements to be more readable (Required) | Start and stop local server and observe errors | . # server = &quot;http://127.0.0.1:5000/&quot; # run local server = &#39;https://flask.nighthawkcodingsociety.com/&#39; # run from web server url = server + &quot;api/jokes/&quot; responses = [] # responses list # Get the count of jokes on server count_response = requests.get(url+&quot;count&quot;) count_json = count_response.json() count = count_json[&#39;count&#39;] # Update likes/dislikes test sequence num = str(random.randint(0, count-1)) # test a random record responses.append( requests.get(url+num) # Get/read joke by id ) responses.append( requests.put(url+&quot;like/&quot;+num) # Put/add to like count ) responses.append( requests.put(url+&quot;jeer/&quot;+num) # Put/add to jeer count ) # Get a random joke responses.append( requests.get(url+&quot;random&quot;) # Get/read a random joke ) # Cycle through and print responses for response in responses: print(response) try: print(response.json()) except: print(&quot;data error&quot;) .",
            "url": "https://nighthawkcoders.github.io/APCSP/techtalk/webapi",
            "relUrl": "/techtalk/webapi",
            "date": " • Jun 1, 2022"
        }
        
    
  

  
  
      ,"page0": {
          "title": "Schedule",
          "content": "Introduction to Tools and Resources . The initial weeks focus on introducing Tools, Pair Programming, and the AP Resources that we plan to use throughout the year. At the end of Weeks 0-3, students will be exposed to blogging with GitHub Pages; developing with Jupyter Notebooks, Python, JavaScript, HTML, and Code.org AppLab; working with AP classroom and becoming familiar with Create Performance Task project requirements. . Week Sprint Human Prep AP Test Prep Career Tech Canvas . 3 | Creative Development | How I got a 5! | Create Performance Task | JavaScript Tutorial Program Design with AppLab | Creative Development Points Review Tickets | . 2 🚧 | Data Abstraction | Reflections on Computer Science Alumni Panel (extra credit) | Python Lists and Dictionaries | HTML Fragments and Layouts | Data Abstraction Points Review Tickets | . 1 💰 | Introduction to Python | Table Visits | Hello to Python | Bash and Checks Fastpages, Jupyter Notebooks, Markdown | Intro Python, Jupyter, Fastpages Review Tickets | . 0 💰 | Tool Setup | Scoring History | Pseudo Code | Tools and Equipment | Tools Setup Review Tickets | . Introduction to Web Development . Websites are made up of three key parts: Frontend, Backend, and Deployment. The focus for these weeks is to enable students to perform all the aspects of constructing constructing and deploying a Website. Fastpages got us started on these concepts, but now we will build a Website from the ground up. Once again, there will be a lot of learning focused tools and getting things working. But, in the end, students will be ready to learn all aspects of Website Development. . Week Sprint Human Prep AP Test Prep Career Tech Canvas . 6 | Deployment: AWS, Docker, Nginx | Agile and Roles | 1.3 Program Design and Development | Bash Introduction, Deployment Guide | | . 5 | Backend Development: Flask/Python | Focus and Habits | 1.2 Program Function and Purpose | Python API Endpoints using Jokes | | . 4 | Frontend Development: HTML/JavaScript | Reflections on Computer Science | 1.1 Collaboration | Frontend with Fastpages | | . Fundamental of Programming and Algorithms . The tough solutions to problems in Computer Science generally require an algorithm. Each algorithm usually involves data, for instance Data Science is a field that focuses on data with algorithms. The next few week focuses on some very detailed algorithms, but we hope to express these details visually with our Web and Blogging capabilities. Data and binary are sometimes considered boring, but we produce data with analytics or learn to alter the internals of images, the data and algorithms can become VERY interesting. . Week Sprint Human Prep AP Test Prep Career Tech Canvas . 10 | Algorithms for Images | | 2.2 Data Compression | Image Manipulations (TBD) | TBD | . 9 | Working with Images | | 2.3 Extracting Information from Data | RGB Values and Base64 | TBD | . 8 | Working with Binary | | 2.1 Binary Numbers | Binary Calculator ASCII, Base 2, 8, 16 (TBD) | TBD | . 7 | Methodology: Test Driven Development | | 1.4 Identifying and Correcting Errors | Frontend and Backend APIs | TBD | .",
          "url": "https://nighthawkcoders.github.io/APCSP/schedule",
          "relUrl": "/schedule",
          "date": ""
      }
      
  

  
      ,"page1": {
          "title": "Frontend",
          "content": "| Overview | Tutorial | Calculator | Binary | Grades | Graph | Life | Snake | . Code in this Sub Menu . HTML, CSS, and JavaScript are the front-end of the Web. Many tools and languages complement development using markup, style and javascript. This section of the Del Note CS website is providing some code samples. These are intended to spark your own PBL ideas. Each of these were generated after watching others teach or interacting with students. . Tutorial: This is a Jupyter Notebook built using the JavaScript kernel. This provides a few fundamentals of JavaScript language. Pull this file into VSCode and explore the fundamentals of the language. | Calculator: This calculator was inspired by Mr. Mortensen’s calculator that he built in Objective-C during his first year of teaching at DNHS. It was recreated by former student Anthony using GitHub pages, HTML, JavaScript, and CSS in 2022. Creating a calculator helps developers to learn how to store data, manage presentation, associate input to output, and work with logic | Visually shows how math works within a language; specific functions, handling of very big vs. very small numbers, etc. | . | Binary: This example was created after watching Harvard CS50 by David J. Malan in 2020, he had built a machine to turn on and off lights/binary digits. My thought after watching machine, why not simulate it in software? Liquid is used to generate the HTML bits and parameters for onclick actions | JavaScript is used base 2, 8, 16 calculations | . | Grades: This grade calculator was created to show interaction of HTML and JavaScript to perform input. Additionally, it show how to add element to HTML Document Object Model (DOM). FYI, the IJavaScript kernel did not support input as of this writing. | Graph: This was created when a student named Bryant 2022 asked me the question “how would I plot data?” as described in an FRQ. JavaScript canvas is used to draw grid, axis, lines | . | Life: This was created by Nathaniel 2022 when I asked him about something interesting to show students in JS that relates to school. Built on Conway’s Game of Life (Wikipedia, Original) | Somewhat pure JavaScript, no canvas usage even though it has a grid. | . | Snake: This was interest of students in each of my 3 years, inspiration and some of the code came from a student named Nolan 2021. Contains menu and settings, as well as Grid | Uses JavaScript canvas and key events | . | . Frontend Web Development Overview . . Frontend web development is the development of the graphical user interface of a website, through the use of HTML, CSS, and JavaScript, so that users can view and interact with that website. In this class, we will be using Fastpages on top of GitHub Pages to maximize our presentations, while minimizing our front-end coding. GitHub Pages deployment is performed through Jekyll, which regenerates the website automatically after each commit, tracking can be seen in Actions tab within GitHub. | HTML generation is performed through Liquid, a template language (similar to Jinja2 or Thymeleaf). | CSS style layout is provided by using Themes provided through GH Pages. Each page we make we assume the defined theme and insert our HTML fragments, local page style, and local page JavaScript. | JavaScript enable pages to have actions, fetch content, animate, etc | . . .",
          "url": "https://nighthawkcoders.github.io/APCSP/frontend/overview",
          "relUrl": "/frontend/overview",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "API",
          "content": "| Overview | Covid19 RapidAPI | Jokes API | Users Database | . APIs in this Sub Menu . HTML, CSS, and JavaScript are the front-end of the API. Python and API resource definitions are used for RESTful API definitions. Abstraction of Frontend and Backend code, the exchange of standard data format (JSON), and guidelines for exchange (REST) is a technique that saves a lot of time between developers. Learning APIs is a highly recommended step for every developer trying to break into the world of tech. . Covid19: RapidAPI example. This is introducing APIs by accessing something that already exists. RapidAPI shows how many practice RESTful definitions. Almost any data source imagined can be accessed here. | Jokes: An introduction to Python RESTful API libraries. A Python List is used to make a Data Model, but persistence in this technique is limited, each time server is refreshed data is lost. This example is great for learning, but data is considered volatile. | Users: Another RESTful API library example. However, this backend establishes data persistence through the use of a database. This data if properly managed in deployment and migrated when changed can last forever. | . Web API Overview . . A Web API is an application programming interface typically for a web browser. Non-changing or Static Endpoints are used in interacting with the server-side Web APIs. RESTful Web APIs use HTTP methods to access resources via URL parameters, and use JSON for transmitting text between client and server. Server. In these examples, we will be using Python to define REST APIs. Python tools are very popular for building RESTful APIs | REST: Representational State Transfer. A set of guidelines on how to architect a network-connected software system. | Client-server: One guideline is a client and server must be decoupled from each other, allowing each to develop independently. | Layered system: The client may access the resources on the server indirectly through other layers such as a proxy or using authentication. This will be clarified by application and security requirements. | . Client. JavaScript is the frontend language used to consume data from the Python defined REST APIs. Fetch will be used to make HTTP requests, as well as handle HTTP response. There are four basic HTTP methods, they align with Create, Read, Update, Delete (CRUD). | GET =&gt; Retrieve/Read data | POST =&gt; Create data | PUT =&gt; Update data | DELETE =&gt; Delete data | . REST endpoints will have similarity from application to application. In planning APIs, for a Users system you can anticipate key methods. The Users RESTful APIs would likely contain these endpoints. | GET: /users =&gt; Get a list of users | GET: /users(id) =&gt; Get a single user | POST: /users =&gt; Create a new user | PUT: /users(id) =&gt; Update a user | DELETE: /users(id) =&gt; Delete a user | . Once a RESTful API receives and processes an HTTP request, it will return an HTTP response. Included in this response is an HTTP status code. Common status codes are shown. | 200 =&gt; OK, this response will then have the promise of JSON data | 400 =&gt; Bad Request | 404 =&gt; Not Found | 500 =&gt; Internal Server Error (aka bug) | . . . .",
          "url": "https://nighthawkcoders.github.io/APCSP/api/overview",
          "relUrl": "/api/overview",
          "date": ""
      }
      
  

  

  

  
      ,"page5": {
          "title": "About Us",
          "content": "This site is built with fastpages . Key Links . GitHub Repos: github.com/nighthawkcoders | AWS Deployments: csp.nighthawkcodingsociety.com | Slack: Join Link | . | 2021-2022 Archives: Fall, Early Winter, Late Winter, Spring | . Name ID .",
          "url": "https://nighthawkcoders.github.io/APCSP/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
      ,"page7": {
          "title": "",
          "content": "Objectives . . This Conceptual Framework teaches College Boards 5 Big Ideas of AP Computer Science Principles, Python, JavaScript, and a Web Site application development together in an integrated fashion. The purpose is to teach College Board requirements while adding languages, tools, frameworks, and methodologies that meet Career Technical Education (CTE) needs. The outcome is preparing the High School student for the AP Test and simultaneously building the skills required for Computer Science internships. . . Blogs .",
          "url": "https://nighthawkcoders.github.io/APCSP/",
          "relUrl": "/",
          "date": ""
      }
      
  

  
  

  
  

  
  

  
  

  
      ,"page12": {
          "title": "",
          "content": "Objectives . . This Conceptual Framework teaches College Boards 5 Big Ideas of AP Computer Science Principles, Python, JavaScript, and a Web Site application development together in an integrated fashion. The purpose is to teach College Board requirements while adding languages, tools, frameworks, and methodologies that meet Career Technical Education (CTE) needs. The outcome is preparing the High School student for the AP Test and simultaneously building the skills required for Computer Science internships. . . Blogs .",
          "url": "https://nighthawkcoders.github.io/APCSP/page2/",
          "relUrl": "/page2/",
          "date": ""
      }
      
  

  
      ,"page13": {
          "title": "",
          "content": "Objectives . . This Conceptual Framework teaches College Boards 5 Big Ideas of AP Computer Science Principles, Python, JavaScript, and a Web Site application development together in an integrated fashion. The purpose is to teach College Board requirements while adding languages, tools, frameworks, and methodologies that meet Career Technical Education (CTE) needs. The outcome is preparing the High School student for the AP Test and simultaneously building the skills required for Computer Science internships. . . Blogs .",
          "url": "https://nighthawkcoders.github.io/APCSP/page3/",
          "relUrl": "/page3/",
          "date": ""
      }
      
  

  
  

  
      ,"page15": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://nighthawkcoders.github.io/APCSP/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}